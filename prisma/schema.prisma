generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String         @id @default(cuid())
  employeeId           String         @unique
  email                String         @unique
  name                 String
  department           String?
  facilityId           String?
  role                 String?
  avatar               String?
  accountType          String
  permissionLevel      Decimal
  canPerformLeaderDuty Boolean        @default(false)
  professionCategory   String?
  parentId             String?
  budgetApprovalLimit  Float?
  stakeholderCategory  String?
  position             String?
  expertise            Int?
  hierarchyLevel       Int?
  isRetired            Boolean        @default(false)
  retirementDate       DateTime?
  anonymizedId         String?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  lastLoginAt          DateTime?
  loginCount           Int            @default(0)
  auditLogs            AuditLog[]
  evaluations          Evaluation[]
  feedbackReceived     Feedback[]     @relation("FeedbackReceiver")
  feedbackSent         Feedback[]     @relation("FeedbackSender")
  interviews           Interview[]
  notifications        Notification[]
  projects             Project[]
  surveys              Survey[]
  reportsSent          PostReport[]   @relation("ReportSender")
  reportsReviewed      PostReport[]   @relation("ReportReviewer")
  alertsAcknowledged   PostReportAlert[] @relation("AlertAcknowledger")
  parent               User?          @relation("UserHierarchy", fields: [parentId], references: [id])
  children             User[]         @relation("UserHierarchy")
}

model Notification {
  id             String    @id @default(cuid())
  category       String
  subcategory    String?
  priority       String
  title          String
  content        String
  target         String
  senderId       String
  status         String    @default("pending")
  sentAt         DateTime?
  recipientCount Int       @default(0)
  readCount      Int       @default(0)
  clickCount     Int       @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  sender         User      @relation(fields: [senderId], references: [id])
}

model Interview {
  id               String    @id @default(cuid())
  employeeId       String
  category         String
  type             String
  topic            String
  preferredDate    DateTime
  scheduledDate    DateTime?
  actualDate       DateTime?
  duration         Int?
  interviewerId    String?
  interviewerName  String?
  status           String    @default("pending")
  urgencyLevel     String
  result           String?
  notes            String?
  followUpRequired Boolean   @default(false)
  followUpDate     DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  employee         User      @relation(fields: [employeeId], references: [id])
}

model Evaluation {
  id                String    @id @default(cuid())
  employeeId        String
  period            String
  evaluationType    String
  overallScore      Float?
  categoryScores    Json
  selfAssessment    String?
  achievements      Json?
  challenges        Json?
  managerScore      Float?
  managerComments   String?
  peerScores        Json?
  subordinateScores Json?
  hasObjection      Boolean   @default(false)
  objectionReason   String?
  objectionStatus   String?
  objectionResult   String?
  status            String    @default("draft")
  submittedAt       DateTime?
  completedAt       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  employee          User      @relation(fields: [employeeId], references: [id])
}

model Survey {
  id             String           @id @default(cuid())
  title          String
  description    String?
  category       String
  createdById    String
  targetAudience String
  deadline       DateTime
  isAnonymous    Boolean          @default(true)
  questions      Json
  responseCount  Int              @default(0)
  completionRate Float?
  averageScore   Float?
  status         String           @default("draft")
  publishedAt    DateTime?
  closedAt       DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  createdBy      User             @relation(fields: [createdById], references: [id])
  responses      SurveyResponse[]
}

model SurveyResponse {
  id           String   @id @default(cuid())
  surveyId     String
  respondentId String?
  answers      Json
  score        Float?
  comments     String?
  submittedAt  DateTime @default(now())
  ipAddress    String?
  userAgent    String?
  survey       Survey   @relation(fields: [surveyId], references: [id])
}

model Project {
  id               String    @id @default(cuid())
  title            String
  description      String
  category         String
  proposerId       String
  objectives       Json
  expectedOutcomes Json
  budget           Float?
  timeline         Json?
  status           String    @default("proposed")
  priority         String?
  approvalLevel    Int       @default(0)
  approvedBy       Json?
  rejectionReason  String?
  progressRate     Float     @default(0)
  milestones       Json?
  deliverables     Json?
  actualOutcomes   Json?
  lessonsLearned   String?
  roi              Float?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  startedAt        DateTime?
  completedAt      DateTime?
  proposer         User      @relation(fields: [proposerId], references: [id])
}

model Feedback {
  id          String    @id @default(cuid())
  senderId    String
  receiverId  String
  type        String
  category    String
  content     String
  importance  String
  isAnonymous Boolean   @default(false)
  response    String?
  respondedAt DateTime?
  status      String    @default("sent")
  readAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  receiver    User      @relation("FeedbackReceiver", fields: [receiverId], references: [id])
  sender      User      @relation("FeedbackSender", fields: [senderId], references: [id])
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  action     String
  entityType String
  entityId   String
  oldValues  Json?
  newValues  Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
}

model InterviewResult {
  id                  String    @id @default(cuid())
  requestId           String    @unique
  interviewId         String    @unique
  completedAt         DateTime
  duration            Int
  summary             String
  keyPoints           Json
  actionItems         Json
  followUpRequired    Boolean   @default(false)
  followUpDate        DateTime?
  feedbackToEmployee  String
  nextRecommendations Json
  receivedAt          DateTime  @default(now())
  processedAt         DateTime?
  status              String    @default("received")
  errorMessage        String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model ComplianceAcknowledgement {
  id                      String    @id @default(cuid())
  reportId                String    @unique
  medicalSystemCaseNumber String    @unique
  anonymousId             String
  severity                String
  category                String
  receivedAt              DateTime
  estimatedResponseTime   String
  requiresImmediateAction Boolean   @default(false)
  currentStatus           String    @default("received")
  nextSteps               String?
  webhookReceivedAt       DateTime  @default(now())
  processed               Boolean   @default(false)
  processedAt             DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  @@index([reportId])
  @@index([anonymousId])
  @@index([medicalSystemCaseNumber])
}

model DataConsent {
  id                          String    @id @default(cuid())
  userId                      String    @unique
  analyticsConsent            Boolean   @default(false)
  analyticsConsentDate        DateTime?
  personalFeedbackConsent     Boolean   @default(false)
  personalFeedbackConsentDate DateTime?
  revokeDate                  DateTime?
  dataDeletionRequested       Boolean   @default(false)
  dataDeletionRequestedAt     DateTime?
  dataDeletionCompletedAt     DateTime?
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt

  @@index([userId])
  @@index([analyticsConsent])
}

// 投稿通報システム
model PostReport {
  id              String           @id @default(cuid())
  postId          String
  alertId         String?
  reporterId      String
  reporterName    String?
  reportType      String           // personal_attack, defamation, harassment, etc.
  description     String?
  status          String           @default("pending") // pending, reviewing, actioned, dismissed
  reviewedBy      String?
  reviewedAt      DateTime?
  actionTaken     String?
  reviewNotes     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  reporter        User             @relation("ReportSender", fields: [reporterId], references: [id])
  reviewer        User?            @relation("ReportReviewer", fields: [reviewedBy], references: [id])
  alert           PostReportAlert? @relation(fields: [alertId], references: [id])

  @@index([postId])
  @@index([reporterId])
  @@index([status])
  @@index([reportType])
  @@index([alertId])
}

// 通報アラート（閾値超過時の管理者通知）
model PostReportAlert {
  id                   String    @id @default(cuid())
  postId               String    @unique
  severity             String    // low, medium, high, critical
  reportCount          Int
  dominantReportType   String
  message              String
  acknowledged         Boolean   @default(false)
  acknowledgedBy       String?
  acknowledgedAt       DateTime?
  autoModerated        Boolean   @default(false)
  autoModeratedAt      DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  acknowledger         User?     @relation("AlertAcknowledger", fields: [acknowledgedBy], references: [id])
  reports              PostReport[]

  @@index([postId])
  @@index([severity])
  @@index([acknowledged])
}

// Webhook通知（職員カルテシステムからのAnalyticsバッチ処理通知）
model WebhookNotification {
  id             String    @id @default(cuid())
  notificationId String    @unique // 職員カルテシステム側のID
  type           String    // success, error, warning, info
  title          String
  message        String
  details        Json?     // SuccessDetails または ErrorDetails
  accountLevel   Int
  timestamp      DateTime  // 通知発生時刻（職員カルテシステム側）
  read           Boolean   @default(false)
  readAt         DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([notificationId])
  @@index([type])
  @@index([accountLevel])
  @@index([read])
  @@index([timestamp])
}
