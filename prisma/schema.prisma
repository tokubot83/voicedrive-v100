generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// 投稿ステータスのEnum
enum PostStatus {
  // 既存ステータス
  ACTIVE // 通常（アクティブ）
  UNDER_REVIEW // レビュー中
  ARCHIVED // アーカイブ済み

  // 部署議題フロー（30-50点）
  UNDER_DEPT_REVIEW // 部署検討中（30点到達）
  PENDING_SUPERVISOR_REVIEW // 主任の判断待ち（50点到達）
  RECOMMENDED_TO_MANAGER // 師長に推薦済み
  APPROVED_AS_DEPT_AGENDA // 部署議題として承認済み
  REJECTED_BY_SUPERVISOR // 主任が却下
  REJECTED_BY_MANAGER // 師長が却下

  // 施設議題フロー（100点）
  PENDING_DEPUTY_DIRECTOR_REVIEW // 副看護部長の判断待ち（100点到達）
  APPROVED_FOR_COMMITTEE // 委員会提出承認済み
  REJECTED_BY_DEPUTY_DIRECTOR // 副看護部長が却下

  // 期限到達フロー
  FACILITY_VOTE_EXPIRED_PENDING_DECISION // 施設投票期限終了・判断待ち
  DOWNGRADED_TO_DEPT_AGENDA // 施設→部署に降格
  REJECTED_AFTER_FACILITY_VOTE // 施設投票後に却下

  // その他
  CLOSED // 終了
}

model User {
  id                   String    @id @default(cuid())
  employeeId           String    @unique
  email                String    @unique
  name                 String
  department           String?
  facilityId           String?
  role                 String?
  avatar               String?
  accountType          String
  permissionLevel      Decimal
  canPerformLeaderDuty Boolean   @default(false)
  professionCategory   String?
  parentId             String?
  budgetApprovalLimit  Float?
  stakeholderCategory  String?
  position             String?
  expertise            Int?
  hierarchyLevel       Int?
  isRetired            Boolean   @default(false)
  retirementDate       DateTime?
  anonymizedId         String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  lastLoginAt          DateTime?
  loginCount           Int       @default(0)
  age                  Int?
  ageUpdatedAt         DateTime? @map("age_updated_at")
  experienceYears      Float?
  generation           String?

  // Phase 2: 顔写真統合（医療システムからのWebhook連携）
  profilePhotoUrl       String? // CloudFront CDN URL
  profilePhotoUpdatedAt DateTime? // 写真更新日時

  acknowledgedAlerts            AnalyticsAlert[]                @relation("AlertAcknowledger")
  approvalTasksApproved         ApprovalTask[]                  @relation("ApprovalApprover")
  approvalTasksRequested        ApprovalTask[]                  @relation("ApprovalRequester")
  auditLogs                     AuditLog[]
  comments                      Comment[]                       @relation("CommentAuthor")
  chairmanCommittees            CommitteeInfo[]                 @relation("CommitteeChairperson")
  committeeMemberships          CommitteeMember[]               @relation("CommitteeMemberUser")
  submissionRequestsApproved    CommitteeSubmissionRequest[]    @relation("SubmissionApprover")
  submissionRequestsSent        CommitteeSubmissionRequest[]    @relation("SubmissionRequester")
  proposalDocumentsCreated      ProposalDocument[]              @relation("ProposalCreator")
  proposalDocumentsSubmitted    ProposalDocument[]              @relation("ProposalSubmitter")
  ownedInitiatives              CultureInitiative[]             @relation("InitiativeOwner")
  dateVotes                     DateVote[]                      @relation("DateVoter")
  decidedAgendas                DecisionMeetingAgenda[]         @relation("DecisionDecider")
  proposedDecisionAgendas       DecisionMeetingAgenda[]         @relation("DecisionProposer")
  evaluations                   Evaluation[]
  eventsOrganized               Event[]                         @relation("EventOrganizer")
  feedbackReceived              Feedback[]                      @relation("FeedbackReceiver")
  feedbackSent                  Feedback[]                      @relation("FeedbackSender")
  interviews                    Interview[]
  proposedAgendas               ManagementCommitteeAgenda[]     @relation("AgendaProposer")
  notifications                 Notification[]
  eventParticipations           Participant[]                   @relation("EventParticipant")
  pollsCreated                  Poll[]                          @relation("PollCreator")
  pollVotes                     PollVote[]                      @relation("PollVoter")
  posts                         Post[]                          @relation("PostAuthor")
  reportsReviewed               PostReport[]                    @relation("ReportReviewer")
  reportsSent                   PostReport[]                    @relation("ReportSender")
  alertsAcknowledged            PostReportAlert[]               @relation("AlertAcknowledger")
  projects                      Project[]
  surveys                       Survey[]
  parent                        User?                           @relation("UserHierarchy", fields: [parentId], references: [id])
  children                      User[]                          @relation("UserHierarchy")
  activitySummary               UserActivitySummary?
  postVotes                     Vote[]                          @relation("PostVote")
  voteHistory                   VoteHistory[]
  selectedAgendaCandidates      BoardAgendaCandidateSelection[] @relation("AgendaSelector")
  reviewedAgendas               BoardMeetingAgenda[]            @relation("AgendaChairmanReviewer")
  boardPresentations            BoardMeetingAgenda[]            @relation("BoardPresenter")
  createdBoardMeetings          BoardMeeting[]                  @relation("BoardMeetingCreator")
  reviewedProposals             ChairmanProposal[]              @relation("ProposalReviewer")
  createdProposals              ChairmanProposal[]              @relation("ProposalCreator")
  assignedCommonIssues          CrossFacilityCommonIssue[]      @relation("CommonIssueAssignee")
  approvedSuccessCases          CrossFacilitySuccessCase[]      @relation("SuccessCaseApprover")
  successCasesFromFacility      CrossFacilitySuccessCase[]      @relation("SuccessCaseFacility")
  evaluationNotifications       EvaluationNotification[]
  generatedReports              GeneratedReport[]               @relation("ReportGenerator")
  notificationSettings          NotificationSettings?
  projectApprovals              ProjectApproval[]               @relation("ProjectApprover")
  completedMilestones           ProjectMilestone[]              @relation("MilestoneCompletedBy")
  recommendationLogs            ProjectRecommendationLog[]
  projectMemberships            ProjectTeamMember[]             @relation("ProjectMemberships")
  reportAccessLogs              ReportAccessLog[]               @relation("ReportAccessUser")
  reportCustomizations          ReportCustomization[]           @relation("ReportCustomizer")
  participationStats            StaffProjectParticipationStats?
  approvedInsights              StrategicInsight[]              @relation("InsightApprover")
  approvedOpportunities         StrategicOpportunity[]          @relation("OpportunityApprover")
  responsibleReplications       SuccessCaseReplication[]        @relation("ReplicationResponsible")
  replicationsAtFacility        SuccessCaseReplication[]        @relation("ReplicationTargetFacility")
  votingGroupsAsPrimaryApprover VotingGroup[]                   @relation("VotingGroupPrimaryApprover")
  expiredDecisions              ExpiredEscalationDecision[]     @relation("ExpiredDecisions")
  notificationActionsExecuted   NotificationAction[]            @relation("NotificationActionExecutor")
  notificationRecipients        NotificationRecipient[]         @relation("NotificationRecipient")
  settingChanges                VotingSettingChangeLog[]        @relation("SettingChangeUser")
  settingReverts                VotingSettingChangeLog[]        @relation("SettingRevertUser")
  systemConfigsUpdated          SystemConfig[]                  @relation("SystemConfigUpdater")
}

model Notification {
  id             String    @id @default(cuid())
  category       String
  subcategory    String?
  priority       String
  title          String
  content        String
  target         String
  senderId       String
  status         String    @default("pending")
  sentAt         DateTime?
  recipientCount Int       @default(0)
  readCount      Int       @default(0)
  clickCount     Int       @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Phase 2: Approvals page fields
  notificationType  String? // APPROVAL_REQUIRED, MEMBER_SELECTION, VOTE_REQUIRED, etc.
  urgency           String    @default("normal") // normal, high, urgent
  actionRequired    Boolean   @default(false)
  dueDate           DateTime?
  metadata          Json? // Additional flexible data (budget amount, project ID, etc.)
  relatedEntityType String? // Post, Poll, ApprovalTask, etc.
  relatedEntityId   String? // ID of related entity

  sender     User                    @relation(fields: [senderId], references: [id])
  actions    NotificationAction[]
  recipients NotificationRecipient[]
}

model NotificationAction {
  id                   String    @id @default(cuid())
  notificationId       String
  actionType           String // approve, reject, view, participate, decline, vote, escalate
  actionLabel          String // Button label
  actionUrl            String? // Optional URL for action
  actionData           Json? // Additional action parameters
  isPrimary            Boolean   @default(false)
  isDestructive        Boolean   @default(false)
  requiresConfirmation Boolean   @default(false)
  confirmationMessage  String?
  executedAt           DateTime?
  executedBy           String?
  result               Json? // Action execution result
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  executor     User?        @relation("NotificationActionExecutor", fields: [executedBy], references: [id])

  @@index([notificationId])
}

model NotificationRecipient {
  id             String    @id @default(cuid())
  notificationId String
  userId         String
  isRead         Boolean   @default(false)
  readAt         DateTime?
  actionTaken    String? // approve, reject, viewed, etc.
  actionTakenAt  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  user         User         @relation("NotificationRecipient", fields: [userId], references: [id])

  @@unique([notificationId, userId])
  @@index([userId, isRead])
  @@index([userId, actionTaken])
}

// システム全体設定テーブル（mode-switcher用）
model SystemConfig {
  id          String   @id @default(cuid())
  configKey   String   @unique
  configValue Json
  category    String // "system", "feature", "ui"
  description String?
  isActive    Boolean  @default(true)
  updatedBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  updatedByUser User @relation("SystemConfigUpdater", fields: [updatedBy], references: [id])

  @@index([configKey])
  @@index([category])
  @@index([updatedAt])
  @@map("system_configs")
}

model Interview {
  id               String    @id @default(cuid())
  employeeId       String
  category         String
  type             String
  topic            String
  preferredDate    DateTime
  scheduledDate    DateTime?
  actualDate       DateTime?
  duration         Int?
  interviewerId    String?
  interviewerName  String?
  status           String    @default("pending")
  urgencyLevel     String
  result           String?
  notes            String?
  followUpRequired Boolean   @default(false)
  followUpDate     DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  employee         User      @relation(fields: [employeeId], references: [id])
}

model Evaluation {
  id                String    @id @default(cuid())
  employeeId        String
  period            String
  evaluationType    String
  overallScore      Float?
  categoryScores    Json
  selfAssessment    String?
  achievements      Json?
  challenges        Json?
  managerScore      Float?
  managerComments   String?
  peerScores        Json?
  subordinateScores Json?
  hasObjection      Boolean   @default(false)
  objectionReason   String?
  objectionStatus   String?
  objectionResult   String?
  status            String    @default("draft")
  submittedAt       DateTime?
  completedAt       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  employee          User      @relation(fields: [employeeId], references: [id])
}

model Survey {
  id             String           @id @default(cuid())
  title          String
  description    String?
  category       String
  createdById    String
  targetAudience String
  deadline       DateTime
  isAnonymous    Boolean          @default(true)
  questions      Json
  responseCount  Int              @default(0)
  completionRate Float?
  averageScore   Float?
  status         String           @default("draft")
  publishedAt    DateTime?
  closedAt       DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  createdBy      User             @relation(fields: [createdById], references: [id])
  responses      SurveyResponse[]
}

model SurveyResponse {
  id           String   @id @default(cuid())
  surveyId     String
  respondentId String?
  answers      Json
  score        Float?
  comments     String?
  submittedAt  DateTime @default(now())
  ipAddress    String?
  userAgent    String?
  survey       Survey   @relation(fields: [surveyId], references: [id])
}

model Project {
  id               String    @id @default(cuid())
  title            String
  description      String
  category         String
  proposerId       String
  objectives       Json
  expectedOutcomes Json
  budget           Float?
  timeline         Json?
  status           String    @default("proposed")
  priority         String?
  approvalLevel    Int       @default(0)
  approvedBy       Json?
  rejectionReason  String?
  progressRate     Float     @default(0)
  milestones       Json?
  deliverables     Json?
  actualOutcomes   Json?
  lessonsLearned   String?
  roi              Float?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  startedAt        DateTime?
  completedAt      DateTime?

  // 🆕 Post変換用フィールド
  convertedToPostId String?   @unique @map("converted_to_post_id")
  conversionDate    DateTime? @map("conversion_date")

  proposer      User  @relation(fields: [proposerId], references: [id])
  convertedPost Post? @relation("ConvertedFromProject", fields: [convertedToPostId], references: [id])
}

model Feedback {
  id          String    @id @default(cuid())
  senderId    String
  receiverId  String
  type        String
  category    String
  content     String
  importance  String
  isAnonymous Boolean   @default(false)
  response    String?
  respondedAt DateTime?
  status      String    @default("sent")
  readAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  receiver    User      @relation("FeedbackReceiver", fields: [receiverId], references: [id])
  sender      User      @relation("FeedbackSender", fields: [senderId], references: [id])
}

model AuditLog {
  id                String   @id @default(cuid())
  userId            String
  action            String
  entityType        String
  entityId          String
  oldValues         Json?
  newValues         Json?
  ipAddress         String?
  userAgent         String?
  createdAt         DateTime @default(now())
  executorLevel     Float?   @map("executor_level")
  targetUserId      String?  @map("target_user_id")
  reason            String?
  isEmergencyAction Boolean  @default(false) @map("is_emergency_action")
  syncPending       Boolean  @default(false) @map("sync_pending")
  user              User     @relation(fields: [userId], references: [id])

  @@index([action, isEmergencyAction])
  @@index([targetUserId])
}

model InterviewResult {
  id                  String    @id @default(cuid())
  requestId           String    @unique
  interviewId         String    @unique
  completedAt         DateTime
  duration            Int
  summary             String
  keyPoints           Json
  actionItems         Json
  followUpRequired    Boolean   @default(false)
  followUpDate        DateTime?
  feedbackToEmployee  String
  nextRecommendations Json
  receivedAt          DateTime  @default(now())
  processedAt         DateTime?
  status              String    @default("received")
  errorMessage        String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model ComplianceAcknowledgement {
  id                      String    @id @default(cuid())
  reportId                String    @unique
  medicalSystemCaseNumber String    @unique
  anonymousId             String
  severity                String
  category                String
  receivedAt              DateTime
  estimatedResponseTime   String
  requiresImmediateAction Boolean   @default(false)
  currentStatus           String    @default("received")
  nextSteps               String?
  webhookReceivedAt       DateTime  @default(now())
  processed               Boolean   @default(false)
  processedAt             DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  @@index([reportId])
  @@index([anonymousId])
  @@index([medicalSystemCaseNumber])
}

model DataConsent {
  id                          String    @id @default(cuid())
  userId                      String    @unique
  analyticsConsent            Boolean   @default(false)
  analyticsConsentDate        DateTime?
  personalFeedbackConsent     Boolean   @default(false)
  personalFeedbackConsentDate DateTime?
  revokeDate                  DateTime?
  dataDeletionRequested       Boolean   @default(false)
  dataDeletionRequestedAt     DateTime?
  dataDeletionCompletedAt     DateTime?
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt

  @@index([userId])
  @@index([analyticsConsent])
}

model PostReport {
  id           String           @id @default(cuid())
  postId       String
  alertId      String?
  reporterId   String
  reporterName String?
  reportType   String
  description  String?
  status       String           @default("pending")
  reviewedBy   String?
  reviewedAt   DateTime?
  actionTaken  String?
  reviewNotes  String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  alert        PostReportAlert? @relation(fields: [alertId], references: [id])
  reviewer     User?            @relation("ReportReviewer", fields: [reviewedBy], references: [id])
  reporter     User             @relation("ReportSender", fields: [reporterId], references: [id])

  @@index([postId])
  @@index([reporterId])
  @@index([status])
  @@index([reportType])
  @@index([alertId])
}

model PostReportAlert {
  id                 String       @id @default(cuid())
  postId             String       @unique
  severity           String
  reportCount        Int
  dominantReportType String
  message            String
  acknowledged       Boolean      @default(false)
  acknowledgedBy     String?
  acknowledgedAt     DateTime?
  autoModerated      Boolean      @default(false)
  autoModeratedAt    DateTime?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  reports            PostReport[]
  acknowledger       User?        @relation("AlertAcknowledger", fields: [acknowledgedBy], references: [id])

  @@index([postId])
  @@index([severity])
  @@index([acknowledged])
}

model WebhookNotification {
  id             String           @id @default(cuid())
  notificationId String           @unique
  type           String
  title          String
  message        String
  details        Json?
  accountLevel   Int
  timestamp      DateTime
  read           Boolean          @default(false)
  readAt         DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  groupAnalytics GroupAnalytics[]

  @@index([notificationId])
  @@index([type])
  @@index([accountLevel])
  @@index([read])
  @@index([timestamp])
}

model VoteHistory {
  id           String   @id @default(cuid())
  userId       String
  postId       String
  voteOption   String
  voteWeight   Float    @default(1.0)
  votedAt      DateTime @default(now())
  postCategory String?
  postType     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
  @@index([votedAt])
}

model UserActivitySummary {
  id               String   @id @default(cuid())
  userId           String   @unique
  totalPosts       Int      @default(0)
  totalVotes       Int      @default(0)
  thisMonthVotes   Int      @default(0)
  impactScore      Float    @default(0)
  feedbackReceived Int      @default(0)
  feedbackSent     Int      @default(0)
  projectsProposed Int      @default(0)
  surveysCompleted Int      @default(0)
  loginDays        Int      @default(0)
  lastCalculatedAt DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([impactScore])
}

model Post {
  id                 String    @id @default(cuid())
  type               String
  content            String
  authorId           String
  anonymityLevel     String
  status             String    @default("active")
  proposalType       String?
  priority           String?
  freespaceCategory  String?
  freespaceScope     String?
  expirationDate     DateTime?
  isExpired          Boolean   @default(false)
  extensionRequested Boolean   @default(false)
  extensionReason    String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  agendaScore        Int?      @default(0)
  agendaLevel        String?
  season             String?
  moderationStatus   String    @default("pending")
  moderationScore    Int?
  approvalStatus     String?   @default("pending") @map("approval_status")
  approvedAt         DateTime? @map("approved_at")
  approvedBy         String?   @map("approved_by")
  rejectedAt         DateTime? @map("rejected_at")
  rejectedBy         String?   @map("rejected_by")
  rejectionReason    String?   @map("rejection_reason")

  // 🆕 議題モード管理フィールド
  agendaStatus                 PostStatus? @default(ACTIVE) @map("agenda_status")
  agendaDecisionBy             String?     @map("agenda_decision_by")
  agendaDecisionAt             DateTime?   @map("agenda_decision_at")
  agendaDecisionReason         String?     @map("agenda_decision_reason")
  agendaRescueLevel            Int?        @map("agenda_rescue_level")
  agendaVotingDeadline         DateTime?   @map("agenda_voting_deadline")
  projectDueDate               DateTime?   @map("project_due_date")
  projectLevel                 String?     @map("project_level")
  projectScore                 Int?        @default(0) @map("project_score")
  currentProjectLevelStartedAt DateTime?   @map("current_project_level_started_at")
  lastProjectLevelUpgrade      DateTime?   @map("last_project_level_upgrade")
  projectProgress              Int?        @default(0) @map("project_progress")
  totalEngagements             Int         @default(0) @map("total_engagements")
  stronglySupportCount         Int         @default(0) @map("strongly_support_count")
  supportCount                 Int         @default(0) @map("support_count")
  neutralCount                 Int         @default(0) @map("neutral_count")
  opposeCount                  Int         @default(0) @map("oppose_count")
  stronglyOpposeCount          Int         @default(0) @map("strongly_oppose_count")
  requiredSkills               String?     @map("required_skills")
  projectComplexity            String?     @map("project_complexity")
  targetProfession             String?     @map("target_profession")
  targetDepartment             String?     @map("target_department")

  // 🆕 Projects Legacy (ProjectListPage) 用フィールド
  projectStatus       String?   @map("project_status") // 'active' | 'completed' | 'paused'
  projectStartDate    DateTime? @map("project_start_date")
  projectEndDate      DateTime? @map("project_end_date")
  projectDepartment   String?   @map("project_department")
  projectFacilityId   String?   @map("project_facility_id")
  projectFacilityName String?   @map("project_facility_name")
  projectParticipants Int?      @default(0) @map("project_participants")

  // 🆕 Projects (EnhancedProjectListPage) 用フィールド
  projectBudget        Float?  @map("project_budget") // 予算総額
  projectBudgetUsed    Float?  @map("project_budget_used") // 予算使用額
  projectTimeline      String? @map("project_timeline") // タイムライン説明
  projectStage         String? @map("project_stage") // プロジェクトステージ
  projectApprovalLevel String? @map("project_approval_level") // 承認レベル

  comments                   Comment[]
  event                      Event?
  relatedAgendas             ManagementCommitteeAgenda[] @relation("AgendaRelatedPost")
  poll                       Poll?
  author                     User                        @relation("PostAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  votes                      Vote[]
  successCases               CrossFacilitySuccessCase[]  @relation("SuccessCaseSource")
  approvals                  ProjectApproval[]           @relation("PostApprovals")
  diversityAnalysis          ProjectDiversityAnalysis?
  milestones                 ProjectMilestone[]          @relation("ProjectMilestones")
  recommendationLogs         ProjectRecommendationLog[]
  teamMembers                ProjectTeamMember[]         @relation("ProjectTeamMembers")
  projectLevelHistory        ProjectLevelHistory[]       @relation("PostProjectLevelHistory")
  convertedFromProject       Project?                    @relation("ConvertedFromProject")
  expiredEscalationDecisions ExpiredEscalationDecision[] @relation("ExpiredEscalationDecisions")
  proposalDocuments          ProposalDocument[]

  @@index([authorId])
  @@index([type])
  @@index([status])
  @@index([proposalType])
  @@index([freespaceCategory])
  @@index([createdAt])
  @@index([expirationDate])
  @@index([authorId, type, createdAt])
  @@index([approvalStatus, createdAt])
  @@index([approvalStatus])
  @@index([type, status, createdAt])
  @@index([projectDueDate])
  @@index([projectLevel])
  @@index([projectScore])
  @@index([currentProjectLevelStartedAt])
  @@index([projectComplexity])
  // 🆕 Projects Legacy 検索最適化インデックス
  @@index([projectLevel, projectStatus])
  @@index([projectFacilityId, projectStatus])
  @@index([projectDepartment, projectStatus])
  @@index([projectScore, projectLevel])
  // 🆕 Projects (Enhanced) 検索最適化インデックス
  @@index([projectBudget])
  @@index([projectStage])
}

model Vote {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  option    String
  timestamp DateTime @default(now())
  user      User     @relation("PostVote", fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
  @@index([userId, timestamp])
}

model Comment {
  id             String    @id @default(cuid())
  postId         String
  parentId       String?
  authorId       String
  content        String
  commentType    String
  anonymityLevel String
  privacyLevel   String?
  likes          Int       @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  author         User      @relation("CommentAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  parent         Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies        Comment[] @relation("CommentReplies")
  post           Post      @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([parentId])
  @@index([authorId])
}

model Poll {
  id            String       @id @default(cuid())
  postId        String       @unique
  question      String
  description   String?
  totalVotes    Int          @default(0)
  deadline      DateTime
  isActive      Boolean      @default(true)
  allowMultiple Boolean      @default(false)
  showResults   String
  category      String
  scope         String
  createdAt     DateTime     @default(now())
  createdById   String
  createdBy     User         @relation("PollCreator", fields: [createdById], references: [id])
  post          Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  options       PollOption[]
  votes         PollVote[]

  @@index([postId])
  @@index([deadline])
  @@index([isActive])
}

model PollOption {
  id        String     @id @default(cuid())
  pollId    String
  text      String
  emoji     String?
  votes     Int        @default(0)
  sortOrder Int        @default(0)
  poll      Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollVotes PollVote[]

  @@index([pollId])
}

model PollVote {
  id          String     @id @default(cuid())
  pollId      String
  optionId    String
  userId      String
  isAnonymous Boolean    @default(false)
  timestamp   DateTime   @default(now())
  user        User       @relation("PollVoter", fields: [userId], references: [id], onDelete: Cascade)
  option      PollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  poll        Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)

  @@unique([pollId, userId, optionId])
  @@index([pollId])
  @@index([userId])
}

model Event {
  id                   String         @id @default(cuid())
  postId               String         @unique
  title                String
  description          String
  type                 String
  registrationDeadline DateTime?
  finalDate            DateTime?
  finalStartTime       String?
  finalEndTime         String?
  organizerId          String
  maxParticipants      Int?
  venueName            String?
  venueAddress         String?
  cost                 Float?
  requirements         Json?
  status               String         @default("planning")
  visibility           String
  allowDateVoting      Boolean        @default(true)
  allowComments        Boolean        @default(true)
  sendReminders        Boolean        @default(true)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  tags                 Json?
  organizer            User           @relation("EventOrganizer", fields: [organizerId], references: [id])
  post                 Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  participants         Participant[]
  proposedDates        ProposedDate[]

  @@index([postId])
  @@index([organizerId])
  @@index([status])
}

model ProposedDate {
  id         String     @id @default(cuid())
  eventId    String
  date       DateTime
  startTime  String
  endTime    String
  totalVotes Int        @default(0)
  sortOrder  Int        @default(0)
  votes      DateVote[]
  event      Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
}

model DateVote {
  id             String       @id @default(cuid())
  proposedDateId String
  userId         String
  response       String
  timestamp      DateTime     @default(now())
  user           User         @relation("DateVoter", fields: [userId], references: [id])
  proposedDate   ProposedDate @relation(fields: [proposedDateId], references: [id], onDelete: Cascade)

  @@unique([proposedDateId, userId])
  @@index([proposedDateId])
  @@index([userId])
}

model Participant {
  id                  String   @id @default(cuid())
  eventId             String
  userId              String
  status              String
  joinedAt            DateTime @default(now())
  note                String?
  dietaryRequirements Json?
  user                User     @relation("EventParticipant", fields: [userId], references: [id])
  event               Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@index([eventId])
  @@index([userId])
}

model ApprovalTask {
  id                  String    @id @default(cuid())
  title               String
  description         String?
  taskType            String
  amount              Float?
  requesterId         String
  requesterName       String?
  requesterEmployeeId String?
  approverId          String?
  approverName        String?
  approverEmployeeId  String?
  status              String    @default("pending")
  priority            String    @default("medium")
  department          String?
  facilityId          String?
  submittedAt         DateTime  @default(now())
  respondedAt         DateTime?
  approverComment     String?
  metadata            Json?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  approver            User?     @relation("ApprovalApprover", fields: [approverId], references: [id])
  requester           User      @relation("ApprovalRequester", fields: [requesterId], references: [id], onDelete: Cascade)

  @@index([requesterId])
  @@index([approverId])
  @@index([status])
  @@index([department])
  @@index([facilityId])
  @@index([taskType])
  @@index([priority])
  @@index([submittedAt])
  @@index([status, department])
  @@index([status, approverId])
}

model ManagementCommitteeAgenda {
  id                        String                 @id @default(cuid())
  title                     String
  agendaType                String
  description               String
  background                String
  proposedBy                String
  proposedDate              DateTime
  proposerDepartment        String
  proposerId                String?
  relatedPostId             String?
  escalationSource          String?
  status                    String                 @default("pending")
  priority                  String                 @default("normal")
  scheduledDate             DateTime?
  actualReviewDate          DateTime?
  decidedDate               DateTime?
  decidedBy                 String?
  decision                  String?
  decisionNotes             String?
  impactDepartments         Json
  estimatedCost             Float?
  implementationPeriod      String?
  expectedEffect            String
  implementationStatus      String?                @default("not_started") @map("implementation_status")
  implementationStartDate   DateTime?              @map("implementation_start_date")
  implementationEndDate     DateTime?              @map("implementation_end_date")
  implementationProgress    Float?                 @default(0) @map("implementation_progress")
  implementationNotes       String?                @map("implementation_notes")
  impactAssessment          String?                @map("impact_assessment")
  impactCategory            String?                @map("impact_category")
  estimatedImpact           Float?                 @map("estimated_impact")
  tags                      Json?
  createdAt                 DateTime               @default(now())
  updatedAt                 DateTime               @updatedAt
  escalatedToDecision       DecisionMeetingAgenda? @relation("CommitteeToDecisionEscalation")
  relatedPost               Post?                  @relation("AgendaRelatedPost", fields: [relatedPostId], references: [id])
  proposer                  User?                  @relation("AgendaProposer", fields: [proposerId], references: [id])
  relatedBoardMeetingAgenda BoardMeetingAgenda[]   @relation("BoardRelatedAgenda")

  @@index([proposerId])
  @@index([relatedPostId])
  @@index([implementationStatus])
  @@index([implementationEndDate])
  @@index([impactCategory])
  @@index([status])
  @@index([priority])
  @@index([agendaType])
  @@index([proposedDate])
}

model CommitteeInfo {
  id              String             @id @default(cuid())
  name            String             @unique
  description     String
  memberCount     Int                @default(0)
  totalMeetings   Int                @default(0)
  activeAgendas   Int                @default(0)
  chairperson     String?
  chairpersonId   String?
  nextMeetingDate DateTime?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  chairpersonUser User?              @relation("CommitteeChairperson", fields: [chairpersonId], references: [id])
  meetings        CommitteeMeeting[]
  members         CommitteeMember[]

  @@index([name])
  @@index([chairpersonId])
}

model CommitteeMember {
  id             String        @id @default(cuid())
  committeeId    String
  userId         String
  name           String
  department     String
  position       String
  role           String
  termStart      DateTime
  termEnd        DateTime?
  isActive       Boolean       @default(true)
  attendanceRate Float         @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  user           User          @relation("CommitteeMemberUser", fields: [userId], references: [id])
  committee      CommitteeInfo @relation(fields: [committeeId], references: [id], onDelete: Cascade)

  @@unique([committeeId, userId])
  @@index([committeeId])
  @@index([userId])
  @@index([role])
  @@index([isActive])
}

model CommitteeMeeting {
  id             String        @id @default(cuid())
  committeeId    String
  committeeName  String
  date           DateTime
  venue          String
  agendaCount    Int           @default(0)
  status         String        @default("scheduled")
  chairperson    String?
  participants   Json?
  meetingMinutes String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  committee      CommitteeInfo @relation(fields: [committeeId], references: [id], onDelete: Cascade)

  @@index([committeeId])
  @@index([date])
  @@index([status])
}

model DecisionMeetingAgenda {
  id                         String                     @id @default(cuid())
  title                      String
  type                       String
  description                String
  background                 String
  proposedBy                 String
  proposedDate               DateTime
  proposerDepartment         String
  proposerId                 String?
  status                     String                     @default("pending")
  priority                   String                     @default("normal")
  scheduledDate              DateTime?
  decidedDate                DateTime?
  decidedBy                  String?
  deciderId                  String?
  decision                   String?
  decisionNotes              String?
  impactDepartments          Json
  impactEstimatedCost        Float?
  impactImplementationPeriod String?
  impactExpectedEffect       String
  attachments                Json?
  meetingAttendeesRaw        Json?
  meetingAttendees           Json?
  meetingDiscussion          String?
  meetingConcerns            Json?
  meetingConditions          Json?
  tags                       Json?
  createdAt                  DateTime                   @default(now())
  updatedAt                  DateTime                   @updatedAt
  relatedCommitteeAgendaId   String?                    @unique
  relatedCommitteeAgenda     ManagementCommitteeAgenda? @relation("CommitteeToDecisionEscalation", fields: [relatedCommitteeAgendaId], references: [id])
  deciderUser                User?                      @relation("DecisionDecider", fields: [deciderId], references: [id])
  proposerUser               User?                      @relation("DecisionProposer", fields: [proposerId], references: [id])

  @@index([proposerId])
  @@index([deciderId])
  @@index([status])
  @@index([priority])
  @@index([type])
  @@index([proposedDate])
  @@index([decidedDate])
  @@index([relatedCommitteeAgendaId])
}

model GroupAnalytics {
  id                    String               @id @default(cuid())
  analysisDate          DateTime
  periodStartDate       DateTime
  periodEndDate         DateTime
  analysisType          String               @default("monthly")
  postingTrendsData     Json
  sentimentAnalysisData Json?
  topicAnalysisData     Json?
  engagementMetricsData Json
  privacyMetadata       Json
  receivedAt            DateTime             @default(now())
  webhookNotificationId String?
  isProcessed           Boolean              @default(true)
  isActive              Boolean              @default(true)
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  alerts                AnalyticsAlert[]
  webhookNotification   WebhookNotification? @relation(fields: [webhookNotificationId], references: [id])

  @@index([analysisDate])
  @@index([analysisType])
  @@index([isActive])
  @@index([periodStartDate, periodEndDate])
  @@index([webhookNotificationId])
}

model AnalyticsAlert {
  id                  String         @id @default(cuid())
  groupAnalyticsId    String
  severity            String
  topic               String
  description         String
  affectedDepartments Json
  recommendedAction   String
  thresholdValue      Float?
  actualValue         Float?
  isAcknowledged      Boolean        @default(false)
  acknowledgedBy      String?
  acknowledgedAt      DateTime?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  acknowledgedByUser  User?          @relation("AlertAcknowledger", fields: [acknowledgedBy], references: [id])
  groupAnalytics      GroupAnalytics @relation(fields: [groupAnalyticsId], references: [id], onDelete: Cascade)

  @@index([groupAnalyticsId])
  @@index([severity])
  @@index([isAcknowledged])
  @@index([severity, isAcknowledged])
  @@index([createdAt])
}

model CultureAssessment {
  id                String                   @id @default(cuid())
  assessmentDate    DateTime
  quarter           String
  periodStartDate   DateTime
  periodEndDate     DateTime
  overallScore      Int
  previousScore     Int?
  previousYearScore Int?
  trend             String
  strengths         Json
  weaknesses        Json
  opportunities     Json
  participantCount  Int
  responseRate      Float
  isActive          Boolean                  @default(true)
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  dimensions        CultureDimension[]
  departmentScores  DepartmentCultureScore[]

  @@index([assessmentDate])
  @@index([quarter])
  @@index([isActive])
  @@index([periodStartDate, periodEndDate])
}

model CultureDimension {
  id                 String             @id @default(cuid())
  assessmentId       String
  dimensionType      String
  name               String
  description        String
  score              Int
  previousScore      Int?
  change             Int
  recommendedActions Json
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  assessment         CultureAssessment  @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  indicators         CultureIndicator[]

  @@index([assessmentId])
  @@index([dimensionType])
}

model CultureIndicator {
  id          String           @id @default(cuid())
  dimensionId String
  name        String
  value       Int
  target      Int
  achievement Float
  trend       String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  dimension   CultureDimension @relation(fields: [dimensionId], references: [id], onDelete: Cascade)

  @@index([dimensionId])
}

model DepartmentCultureScore {
  id                String            @id @default(cuid())
  assessmentId      String
  department        String
  departmentId      String?
  overallScore      Int
  dimensionScores   Json
  rank              Int
  participationRate Float
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  assessment        CultureAssessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@index([assessmentId])
  @@index([department])
  @@index([rank])
}

model CultureInitiative {
  id                  String                @id @default(cuid())
  title               String
  description         String
  objective           String
  status              String                @default("planning")
  priority            String                @default("medium")
  targetDimensions    Json
  targetDepartments   Json
  targetAudience      String
  startDate           DateTime
  endDate             DateTime
  ownerId             String?
  ownerName           String
  teamMembers         Json
  progress            Int                   @default(0)
  currentPhase        String?
  budget              Float?
  actualSpending      Float?
  outcomesDescription String?
  outcomesMetrics     Json?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  completedAt         DateTime?
  owner               User?                 @relation("InitiativeOwner", fields: [ownerId], references: [id])
  kpis                InitiativeKPI[]
  milestones          InitiativeMilestone[]

  @@index([ownerId])
  @@index([status])
  @@index([priority])
  @@index([startDate, endDate])
}

model InitiativeKPI {
  id           String            @id @default(cuid())
  initiativeId String
  name         String
  baseline     Float
  target       Float
  current      Float
  unit         String
  achievement  Float
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  initiative   CultureInitiative @relation(fields: [initiativeId], references: [id], onDelete: Cascade)

  @@index([initiativeId])
}

model InitiativeMilestone {
  id            String            @id @default(cuid())
  initiativeId  String
  name          String
  targetDate    DateTime
  completedDate DateTime?
  status        String            @default("pending")
  deliverables  Json
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  initiative    CultureInitiative @relation(fields: [initiativeId], references: [id], onDelete: Cascade)

  @@index([initiativeId])
  @@index([targetDate])
  @@index([status])
}

model EmergencyDeactivation {
  id                   String    @id @default(cuid())
  targetUserId         String    @map("target_user_id")
  targetEmployeeId     String?   @map("target_employee_id")
  targetUserName       String?   @map("target_user_name")
  executedBy           String    @map("executed_by")
  executorEmployeeId   String?   @map("executor_employee_id")
  executorName         String?   @map("executor_name")
  executorLevel        Float     @map("executor_level")
  reason               String
  timestamp            DateTime  @default(now())
  isEmergency          Boolean   @default(true) @map("is_emergency")
  syncToStaffSystem    Boolean   @default(false) @map("sync_to_staff_system")
  syncedAt             DateTime? @map("synced_at")
  status               String    @default("pending")
  deactivationType     String    @default("emergency") @map("deactivation_type")
  formalRetirementDate DateTime? @map("formal_retirement_date")
  errorMessage         String?   @map("error_message")
  retryCount           Int       @default(0) @map("retry_count")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")

  @@index([targetUserId])
  @@index([executedBy])
  @@index([timestamp])
  @@index([status])
  @@index([syncToStaffSystem])
  @@index([deactivationType])
  @@map("emergency_deactivations")
}

model StaffSystemSyncQueue {
  id                    String    @id @default(cuid())
  type                  String
  eventType             String?   @map("event_type")
  eventId               String?   @map("event_id")
  targetUserId          String?   @map("target_user_id")
  targetEmployeeId      String?   @map("target_employee_id")
  payload               Json
  targetEndpoint        String?   @map("target_endpoint")
  httpMethod            String    @default("POST") @map("http_method")
  status                String    @default("queued")
  priority              Int       @default(5) @map("priority")
  retryCount            Int       @default(0) @map("retry_count")
  maxRetries            Int       @default(3) @map("max_retries")
  queuedAt              DateTime  @default(now()) @map("queued_at")
  processedAt           DateTime? @map("processed_at")
  lastAttemptedAt       DateTime? @map("last_attempted_at")
  completedAt           DateTime? @map("completed_at")
  nextRetryAt           DateTime? @map("next_retry_at")
  cancelledAt           DateTime? @map("cancelled_at")
  cancelReason          String?   @map("cancel_reason")
  responseStatus        Int?      @map("response_status")
  responseBody          String?   @map("response_body")
  errorMessage          String?   @map("error_message")
  errorStack            String?   @map("error_stack")
  relatedDeactivationId String?   @map("related_deactivation_id")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  @@index([status])
  @@index([type])
  @@index([eventType])
  @@index([priority, status])
  @@index([queuedAt])
  @@index([nextRetryAt])
  @@index([targetUserId])
  @@map("staff_system_sync_queue")
}

model ReportTemplate {
  id                  String                @id @default(cuid())
  templateKey         String                @unique @map("template_key")
  title               String
  description         String
  category            String
  icon                String?
  defaultPages        Int                   @default(10) @map("default_pages")
  requiredDataSources Json                  @map("required_data_sources")
  outputFormats       Json                  @map("output_formats")
  isActive            Boolean               @default(true) @map("is_active")
  permissionLevel     Decimal               @map("permission_level")
  generationSchedule  String?               @map("generation_schedule")
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")
  reports             GeneratedReport[]
  customizations      ReportCustomization[]

  @@index([category])
  @@index([permissionLevel])
  @@map("report_templates")
}

model GeneratedReport {
  id             String               @id @default(cuid())
  templateId     String               @map("template_id")
  reportKey      String               @unique @map("report_key")
  title          String
  period         String
  periodStart    DateTime             @map("period_start")
  periodEnd      DateTime             @map("period_end")
  generatedBy    String               @map("generated_by")
  generatedAt    DateTime             @default(now()) @map("generated_at")
  status         String               @default("generating")
  fileUrl        String?              @map("file_url")
  fileSize       Int?                 @map("file_size")
  fileFormat     String?              @map("file_format")
  pageCount      Int?                 @map("page_count")
  downloadCount  Int                  @default(0) @map("download_count")
  viewCount      Int                  @default(0) @map("view_count")
  lastAccessedAt DateTime?            @map("last_accessed_at")
  errorMessage   String?              @map("error_message")
  createdAt      DateTime             @default(now()) @map("created_at")
  updatedAt      DateTime             @updatedAt @map("updated_at")
  sourceAgendas  BoardMeetingAgenda[] @relation("AgendaSourceReport")
  generator      User                 @relation("ReportGenerator", fields: [generatedBy], references: [id])
  template       ReportTemplate       @relation(fields: [templateId], references: [id], onDelete: Cascade)
  accessLogs     ReportAccessLog[]

  @@index([templateId])
  @@index([generatedBy])
  @@index([status])
  @@index([periodStart, periodEnd])
  @@map("generated_reports")
}

model ReportCustomization {
  id               String         @id @default(cuid())
  templateId       String         @map("template_id")
  userId           String         @map("user_id")
  customTitle      String?        @map("custom_title")
  includedSections Json           @map("included_sections")
  excludedSections Json?          @map("excluded_sections")
  customFilters    Json?          @map("custom_filters")
  chartTypes       Json?          @map("chart_types")
  colorScheme      String?        @map("color_scheme")
  isDefault        Boolean        @default(false) @map("is_default")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  user             User           @relation("ReportCustomizer", fields: [userId], references: [id])
  template         ReportTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([templateId, userId])
  @@index([userId])
  @@map("report_customizations")
}

model ReportAccessLog {
  id         String          @id @default(cuid())
  reportId   String          @map("report_id")
  userId     String          @map("user_id")
  action     String
  accessedAt DateTime        @default(now()) @map("accessed_at")
  ipAddress  String?         @map("ip_address")
  userAgent  String?         @map("user_agent")
  user       User            @relation("ReportAccessUser", fields: [userId], references: [id])
  report     GeneratedReport @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([reportId])
  @@index([userId])
  @@index([accessedAt])
  @@map("report_access_logs")
}

model BoardMeetingAgenda {
  id                  String                          @id @default(cuid())
  meetingDate         DateTime                        @map("meeting_date")
  agendaOrder         Int                             @map("agenda_order")
  item                String
  description         String?
  category            String
  duration            Int
  presenterId         String                          @map("presenter_id")
  presenterTitle      String                          @map("presenter_title")
  relatedAgendaId     String?                         @map("related_agenda_id")
  attachments         Json?
  status              String                          @default("scheduled")
  actualDuration      Int?                            @map("actual_duration")
  priority            String?                         @default("medium")
  sourceReport        String?                         @map("source_report")
  sourceReportId      String?                         @map("source_report_id")
  preparedBy          String?                         @map("prepared_by")
  preparationStatus   String?                         @default("draft") @map("preparation_status")
  documentsReady      Boolean                         @default(false) @map("documents_ready")
  presentationReady   Boolean                         @default(false) @map("presentation_ready")
  documentUrls        Json?                           @map("document_urls")
  keyPoints           String?                         @map("key_points")
  expectedDiscussion  String?                         @map("expected_discussion")
  requiredDecision    String?                         @map("required_decision")
  chairmanReview      String?                         @default("pending") @map("chairman_review")
  chairmanComment     String?                         @map("chairman_comment")
  chairmanReviewedBy  String?                         @map("chairman_reviewed_by")
  chairmanReviewedAt  DateTime?                       @map("chairman_reviewed_at")
  createdAt           DateTime                        @default(now()) @map("created_at")
  updatedAt           DateTime                        @updatedAt @map("updated_at")
  candidateSelections BoardAgendaCandidateSelection[]
  chairmanReviewer    User?                           @relation("AgendaChairmanReviewer", fields: [chairmanReviewedBy], references: [id])
  sourceReportRef     GeneratedReport?                @relation("AgendaSourceReport", fields: [sourceReportId], references: [id])
  relatedAgenda       ManagementCommitteeAgenda?      @relation("BoardRelatedAgenda", fields: [relatedAgendaId], references: [id])
  presenter           User                            @relation("BoardPresenter", fields: [presenterId], references: [id])

  @@unique([meetingDate, agendaOrder])
  @@index([meetingDate])
  @@index([presenterId])
  @@index([chairmanReview])
  @@index([chairmanReviewedAt])
  @@map("board_meeting_agendas")
}

model StrategicInsight {
  id                 String    @id @default(cuid())
  insightType        String    @map("insight_type")
  category           String
  title              String
  summary            String
  details            String?
  evidenceData       Json      @map("evidence_data")
  relatedPostIds     Json?     @map("related_post_ids")
  relatedDepartments Json?     @map("related_departments")
  priority           String    @default("medium")
  confidence         Float     @default(0.8) @map("confidence")
  status             String    @default("pending")
  approvedBy         String?   @map("approved_by")
  approvedAt         DateTime? @map("approved_at")
  actionTaken        String?   @map("action_taken")
  implementedAt      DateTime? @map("implemented_at")
  generatedBy        String    @default("ai") @map("generated_by")
  generationModel    String?   @map("generation_model")
  generatedAt        DateTime  @default(now()) @map("generated_at")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  approver           User?     @relation("InsightApprover", fields: [approvedBy], references: [id])

  @@index([insightType])
  @@index([priority])
  @@index([status])
  @@index([generatedAt])
  @@map("strategic_insights")
}

model BoardMeeting {
  id                  String                          @id @default(cuid())
  meetingDate         DateTime                        @map("meeting_date")
  startTime           String                          @map("start_time")
  location            String
  expectedDuration    Int                             @map("expected_duration")
  actualDuration      Int?                            @map("actual_duration")
  expectedAttendees   Int                             @map("expected_attendees")
  actualAttendees     Int?                            @map("actual_attendees")
  attendeeList        Json?                           @map("attendee_list")
  status              String                          @default("planning")
  preparationProgress Int                             @default(0) @map("preparation_progress")
  agendaDocumentUrl   String?                         @map("agenda_document_url")
  minutesDocumentUrl  String?                         @map("minutes_document_url")
  createdBy           String                          @map("created_by")
  createdAt           DateTime                        @default(now()) @map("created_at")
  updatedAt           DateTime                        @updatedAt @map("updated_at")
  candidateSelections BoardAgendaCandidateSelection[]
  decisions           BoardDecision[]                 @relation("BoardDecisions")
  creator             User                            @relation("BoardMeetingCreator", fields: [createdBy], references: [id])
  proposals           ChairmanProposal[]

  @@index([meetingDate])
  @@map("board_meetings")
}

model BoardAgendaCandidateSelection {
  id              String             @id @default(cuid())
  boardMeetingId  String             @map("board_meeting_id")
  agendaId        String             @map("agenda_id")
  selectedAt      DateTime           @default(now()) @map("selected_at")
  selectedBy      String             @map("selected_by")
  selectionReason String?            @map("selection_reason")
  isFinalized     Boolean            @default(false) @map("is_finalized")
  statusHistory   Json?              @map("status_history")
  createdAt       DateTime           @default(now()) @map("created_at")
  updatedAt       DateTime           @updatedAt @map("updated_at")
  selector        User               @relation("AgendaSelector", fields: [selectedBy], references: [id])
  agenda          BoardMeetingAgenda @relation(fields: [agendaId], references: [id], onDelete: Cascade)
  boardMeeting    BoardMeeting       @relation(fields: [boardMeetingId], references: [id], onDelete: Cascade)

  @@unique([boardMeetingId, agendaId])
  @@index([boardMeetingId])
  @@index([selectedBy])
  @@map("board_agenda_candidate_selections")
}

model ChairmanProposal {
  id                    String        @id @default(cuid())
  title                 String
  description           String
  impact                String
  requiredBudget        String
  budgetAmount          Decimal?
  timeline              String
  status                String        @default("draft")
  submittedAt           DateTime?     @map("submitted_at")
  reviewedAt            DateTime?     @map("reviewed_at")
  reviewedBy            String?       @map("reviewed_by")
  reviewComments        String?       @map("review_comments")
  relatedBoardMeetingId String?       @map("related_board_meeting_id")
  documentUrl           String?       @map("document_url")
  createdBy             String        @map("created_by")
  createdAt             DateTime      @default(now()) @map("created_at")
  updatedAt             DateTime      @updatedAt @map("updated_at")
  relatedBoardMeeting   BoardMeeting? @relation(fields: [relatedBoardMeetingId], references: [id])
  reviewer              User?         @relation("ProposalReviewer", fields: [reviewedBy], references: [id])
  creator               User          @relation("ProposalCreator", fields: [createdBy], references: [id])

  @@index([status])
  @@index([createdBy])
  @@index([relatedBoardMeetingId])
  @@map("chairman_proposals")
}

model CrossFacilityCommonIssue {
  id                    String   @id @default(cuid())
  title                 String
  category              String
  description           String
  affectedFacilities    String
  affectedFacilityCount Int      @map("affected_facility_count")
  totalVoices           Int      @map("total_voices")
  severity              String   @default("medium")
  trend                 String   @default("stable")
  suggestedAction       String
  sourcePostIds         String   @map("source_post_ids")
  detectedAt            DateTime @default(now()) @map("detected_at")
  lastUpdatedAt         DateTime @updatedAt @map("last_updated_at")
  status                String   @default("active")
  assignedTo            String?  @map("assigned_to")
  assignee              User?    @relation("CommonIssueAssignee", fields: [assignedTo], references: [id])

  @@index([category])
  @@index([severity])
  @@index([detectedAt])
  @@map("cross_facility_common_issue")
}

model CrossFacilitySuccessCase {
  id                   String                   @id @default(cuid())
  facilityId           String                   @map("facility_id")
  title                String
  category             String
  description          String
  impact               String
  impactMetrics        String?                  @map("impact_metrics")
  replicability        Int                      @default(50)
  implementationCost   String?                  @map("implementation_cost")
  implementationPeriod String?                  @map("implementation_period")
  interestedFacilities String?                  @map("interested_facilities")
  sourcePostId         String                   @map("source_post_id")
  identifiedAt         DateTime                 @default(now()) @map("identified_at")
  status               String                   @default("proposed")
  approvedBy           String?                  @map("approved_by")
  approvedAt           DateTime?                @map("approved_at")
  approver             User?                    @relation("SuccessCaseApprover", fields: [approvedBy], references: [id])
  sourcePost           Post                     @relation("SuccessCaseSource", fields: [sourcePostId], references: [id])
  facility             User                     @relation("SuccessCaseFacility", fields: [facilityId], references: [id])
  replications         SuccessCaseReplication[]

  @@index([facilityId])
  @@index([category])
  @@index([replicability])
  @@map("cross_facility_success_case")
}

model SuccessCaseReplication {
  id                String                   @id @default(cuid())
  successCaseId     String                   @map("success_case_id")
  targetFacilityId  String                   @map("target_facility_id")
  status            String                   @default("planning")
  startedAt         DateTime?                @map("started_at")
  completedAt       DateTime?                @map("completed_at")
  progress          Int                      @default(0)
  results           String?
  resultMetrics     String?                  @map("result_metrics")
  responsiblePerson String                   @map("responsible_person")
  notes             String?
  responsible       User                     @relation("ReplicationResponsible", fields: [responsiblePerson], references: [id])
  targetFacility    User                     @relation("ReplicationTargetFacility", fields: [targetFacilityId], references: [id])
  successCase       CrossFacilitySuccessCase @relation(fields: [successCaseId], references: [id], onDelete: Cascade)

  @@unique([successCaseId, targetFacilityId])
  @@index([targetFacilityId])
  @@index([status])
  @@map("success_case_replication")
}

model StrategicOpportunity {
  id                 String    @id @default(cuid())
  title              String
  opportunity        String
  expectedImpact     String    @map("expected_impact")
  requiredInvestment String    @map("required_investment")
  investmentAmount   Float?    @map("investment_amount")
  timeline           String
  priority           String    @default("medium")
  status             String    @default("proposed")
  proposedAt         DateTime  @default(now()) @map("proposed_at")
  approvedAt         DateTime? @map("approved_at")
  approvedBy         String?   @map("approved_by")
  relatedIssueIds    String?   @map("related_issue_ids")
  targetFacilities   String?   @map("target_facilities")
  kpiTargets         String?   @map("kpi_targets")
  actualResults      String?   @map("actual_results")
  documentUrl        String?   @map("document_url")
  approver           User?     @relation("OpportunityApprover", fields: [approvedBy], references: [id])

  @@index([priority])
  @@index([status])
  @@index([proposedAt])
  @@map("strategic_opportunity")
}

model ProjectApproval {
  id                  String   @id @default(cuid())
  postId              String   @map("post_id")
  approverId          String   @map("approver_id")
  approverName        String   @map("approver_name")
  approverLevel       Float    @map("approver_level")
  action              String
  reason              String?
  comment             String?
  projectLevel        String   @map("project_level")
  projectScore        Int      @map("project_score")
  totalVotes          Int      @map("total_votes")
  supportRate         Float    @map("support_rate")
  isEmergencyOverride Boolean  @default(false) @map("is_emergency_override")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")
  approver            User     @relation("ProjectApprover", fields: [approverId], references: [id])
  post                Post     @relation("PostApprovals", fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([approverId])
  @@index([action])
  @@index([projectLevel])
  @@index([createdAt])
  @@index([postId, createdAt])
  @@index([approverId, projectLevel])
  @@map("project_approvals")
}

model BoardDecision {
  id                      String                                @id @default(cuid())
  boardMeetingId          String                                @map("board_meeting_id")
  meetingDate             DateTime                              @map("meeting_date")
  title                   String
  category                String
  description             String
  decision                String
  implementationDeadline  DateTime                              @map("implementation_deadline")
  responsibleDept         String                                @map("responsible_dept")
  responsibleDeptId       String?                               @map("responsible_dept_id")
  affectedFacilities      Json                                  @map("affected_facilities")
  status                  String                                @default("on_track")
  progress                Int                                   @default(0)
  lastUpdate              DateTime                              @default(now()) @map("last_update")
  createdAt               DateTime                              @default(now()) @map("created_at")
  updatedAt               DateTime                              @updatedAt @map("updated_at")
  facilityImplementations BoardDecisionFacilityImplementation[]
  milestones              BoardDecisionMilestone[]
  boardMeeting            BoardMeeting                          @relation("BoardDecisions", fields: [boardMeetingId], references: [id], onDelete: Cascade)

  @@index([boardMeetingId])
  @@index([status])
  @@index([implementationDeadline])
  @@index([category])
  @@map("board_decisions")
}

model BoardDecisionMilestone {
  id              String        @id @default(cuid())
  boardDecisionId String        @map("board_decision_id")
  title           String
  deadline        DateTime
  status          String        @default("pending")
  assignee        String
  assigneeId      String?       @map("assignee_id")
  sortOrder       Int           @default(0) @map("sort_order")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  completedAt     DateTime?     @map("completed_at")
  boardDecision   BoardDecision @relation(fields: [boardDecisionId], references: [id], onDelete: Cascade)

  @@index([boardDecisionId])
  @@index([status])
  @@index([deadline])
  @@index([sortOrder])
  @@map("board_decision_milestones")
}

model BoardDecisionFacilityImplementation {
  id              String        @id @default(cuid())
  boardDecisionId String        @map("board_decision_id")
  facilityId      String        @map("facility_id")
  facilityName    String        @map("facility_name")
  status          String        @default("not_started")
  progress        Int           @default(0)
  note            String?
  startedAt       DateTime?     @map("started_at")
  completedAt     DateTime?     @map("completed_at")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  boardDecision   BoardDecision @relation(fields: [boardDecisionId], references: [id], onDelete: Cascade)

  @@unique([boardDecisionId, facilityId])
  @@index([boardDecisionId])
  @@index([facilityId])
  @@index([status])
  @@map("board_decision_facility_implementations")
}

/// プロジェクトレベル履歴テーブル
/// プロジェクトモードにおけるレベル昇格履歴を記録
model ProjectLevelHistory {
  id               String   @id @default(cuid())
  postId           String   @map("post_id")
  fromLevel        String?  @map("from_level")
  toLevel          String   @map("to_level")
  fromScore        Int?     @map("from_score")
  toScore          Int      @map("to_score")
  triggeredBy      String?  @map("triggered_by")
  triggeringUserId String?  @map("triggering_user_id")
  upgradedAt       DateTime @default(now()) @map("upgraded_at")
  notes            String?
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  post             Post     @relation("PostProjectLevelHistory", fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([toLevel])
  @@index([upgradedAt])
  @@index([triggeredBy])
  @@map("project_level_history")
}

model ProjectMilestone {
  id              String    @id @default(cuid())
  projectId       String    @map("project_id")
  title           String
  description     String?
  dueDate         DateTime  @map("due_date")
  completedAt     DateTime? @map("completed_at")
  completedBy     String?   @map("completed_by")
  status          String    @default("pending")
  order           Int       @default(0)
  progress        Int?      @default(0) // 🆕 マイルストーン進捗率（Projects用）
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  completedByUser User?     @relation("MilestoneCompletedBy", fields: [completedBy], references: [id])
  project         Post      @relation("ProjectMilestones", fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([status])
  @@index([dueDate])
  @@map("project_milestones")
}

model ProjectTeamMember {
  id        String    @id @default(cuid())
  projectId String    @map("project_id")
  userId    String    @map("user_id")
  role      String    @default("member")
  joinedAt  DateTime  @default(now()) @map("joined_at")
  leftAt    DateTime? @map("left_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  user      User      @relation("ProjectMemberships", fields: [userId], references: [id], onDelete: Cascade)
  project   Post      @relation("ProjectTeamMembers", fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
  @@index([role])
  @@map("project_team_members")
}

model Facility {
  id              String                  @id @default(cuid())
  facilityCode    String                  @unique
  facilityName    String
  facilityType    String
  totalStaffCount Int                     @default(0)
  totalBedCount   Int?
  address         String?
  establishedYear Int?
  corporationId   String
  isActive        Boolean                 @default(true)
  metadata        Json?
  createdAt       DateTime                @default(now()) @map("created_at")
  updatedAt       DateTime                @updatedAt @map("updated_at")
  organizations   OrganizationStructure[]
  votingGroups    VotingGroup[]

  @@index([facilityCode])
  @@index([corporationId])
  @@map("facilities")
}

model OrganizationStructure {
  id                String             @id @default(cuid())
  facilityCode      String
  departmentId      String             @unique
  departmentName    String
  departmentType    String
  sectionId         String?
  sectionName       String?
  votingGroupId     String?
  isActive          Boolean            @default(true)
  sortOrder         Int                @default(0)
  metadata          Json?
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  agendaModeConfig  AgendaModeConfig?
  votingGroup       VotingGroup?       @relation("GroupMembers", fields: [votingGroupId], references: [groupId])
  facility          Facility           @relation(fields: [facilityCode], references: [facilityCode], onDelete: Cascade)
  projectModeConfig ProjectModeConfig?

  @@index([facilityCode])
  @@index([departmentId])
  @@index([votingGroupId])
  @@map("organization_structures")
}

model VotingGroup {
  id                     String                  @id @default(cuid())
  groupId                String                  @unique
  groupName              String
  memberDepartmentIds    Json
  agendaModeEnabled      Boolean                 @default(true)
  projectModeEnabled     Boolean                 @default(true)
  isActive               Boolean                 @default(true)
  primaryApproverId      String?                 @map("primary_approver_id")
  approverRotation       Json?                   @map("approver_rotation")
  metadata               Json?
  createdAt              DateTime                @default(now()) @map("created_at")
  updatedAt              DateTime                @updatedAt @map("updated_at")
  facilityCode           String
  agendaModeGroupConfig  AgendaModeGroupConfig?
  members                OrganizationStructure[] @relation("GroupMembers")
  projectModeGroupConfig ProjectModeGroupConfig?
  primaryApprover        User?                   @relation("VotingGroupPrimaryApprover", fields: [primaryApproverId], references: [id])
  facility               Facility                @relation(fields: [facilityCode], references: [facilityCode], onDelete: Cascade)

  @@index([groupId])
  @@index([facilityCode])
  @@index([primaryApproverId])
  @@map("voting_groups")
}

model AgendaModeConfig {
  id                           String                @id @default(cuid())
  departmentId                 String                @unique
  pending                      Int                   @default(30)
  deptReview                   Int                   @default(50)
  deptAgenda                   Int                   @default(100)
  facilityAgenda               Int                   @default(300)
  corpReview                   Int                   @default(600)
  corpAgenda                   Int                   @default(1000)
  votingScopeRules             Json
  committeeSubmissionEnabled   Boolean               @default(true)
  committeeSubmissionThreshold Int                   @default(100)
  isActive                     Boolean               @default(true)
  metadata                     Json?
  createdAt                    DateTime              @default(now()) @map("created_at")
  updatedAt                    DateTime              @updatedAt @map("updated_at")
  department                   OrganizationStructure @relation(fields: [departmentId], references: [departmentId], onDelete: Cascade)

  @@index([departmentId])
  @@map("agenda_mode_configs")
}

model AgendaModeGroupConfig {
  id                           String      @id @default(cuid())
  groupId                      String      @unique
  pending                      Int         @default(30)
  deptReview                   Int         @default(50)
  deptAgenda                   Int         @default(100)
  facilityAgenda               Int         @default(300)
  corpReview                   Int         @default(600)
  corpAgenda                   Int         @default(1000)
  votingScopeRules             Json
  committeeSubmissionEnabled   Boolean     @default(true)
  committeeSubmissionThreshold Int         @default(100)
  isActive                     Boolean     @default(true)
  metadata                     Json?
  createdAt                    DateTime    @default(now()) @map("created_at")
  updatedAt                    DateTime    @updatedAt @map("updated_at")
  votingGroup                  VotingGroup @relation(fields: [groupId], references: [groupId], onDelete: Cascade)

  @@index([groupId])
  @@map("agenda_mode_group_configs")
}

model ProjectModeConfig {
  id                      String                @id @default(cuid())
  departmentId            String                @unique
  projectUpgradeThreshold Int                   @default(400)
  teamFormationRules      Json
  milestoneRequired       Boolean               @default(true)
  progressReportFrequency String                @default("weekly")
  isActive                Boolean               @default(true)
  metadata                Json?
  createdAt               DateTime              @default(now()) @map("created_at")
  updatedAt               DateTime              @updatedAt @map("updated_at")
  department              OrganizationStructure @relation(fields: [departmentId], references: [departmentId], onDelete: Cascade)

  @@index([departmentId])
  @@map("project_mode_configs")
}

model ProjectModeGroupConfig {
  id                      String      @id @default(cuid())
  groupId                 String      @unique
  projectUpgradeThreshold Int         @default(400)
  teamFormationRules      Json
  milestoneRequired       Boolean     @default(true)
  progressReportFrequency String      @default("weekly")
  isActive                Boolean     @default(true)
  metadata                Json?
  createdAt               DateTime    @default(now()) @map("created_at")
  updatedAt               DateTime    @updatedAt @map("updated_at")
  votingGroup             VotingGroup @relation(fields: [groupId], references: [groupId], onDelete: Cascade)

  @@index([groupId])
  @@map("project_mode_group_configs")
}

model JobCategory {
  id               String   @id @default(cuid())
  jobCategoryCode  String   @unique
  jobCategoryName  String
  jobCategoryGroup String
  requiresLicense  Boolean  @default(false)
  sortOrder        Int      @default(0)
  isActive         Boolean  @default(true)
  metadata         Json?
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  @@index([jobCategoryCode])
  @@index([jobCategoryGroup])
  @@map("job_categories")
}

model ProjectParticipationStats {
  id                       String   @id @default(cuid())
  periodType               String
  periodStart              DateTime @map("period_start")
  periodEnd                DateTime @map("period_end")
  totalParticipants        Int      @default(0) @map("total_participants")
  totalProjects            Int      @default(0) @map("total_projects")
  averageProjectsPerPerson Float    @default(0) @map("avg_projects_per_person")
  diversityScore           Float    @default(0) @map("diversity_score")
  professionDiversityScore Float    @default(0) @map("profession_diversity_score")
  generationDiversityScore Float    @default(0) @map("generation_diversity_score")
  hierarchyDiversityScore  Float    @default(0) @map("hierarchy_diversity_score")
  growthRate               Float?   @map("growth_rate")
  participantGrowthRate    Float?   @map("participant_growth_rate")
  projectGrowthRate        Float?   @map("project_growth_rate")
  calculatedAt             DateTime @default(now()) @map("calculated_at")
  createdAt                DateTime @default(now()) @map("created_at")
  updatedAt                DateTime @updatedAt @map("updated_at")

  @@unique([periodType, periodStart, periodEnd])
  @@index([periodType])
  @@index([periodStart, periodEnd])
  @@map("project_participation_stats")
}

model ProjectParticipationByProfession {
  id               String   @id @default(cuid())
  periodType       String
  periodStart      DateTime @map("period_start")
  periodEnd        DateTime @map("period_end")
  professionCode   String   @map("profession_code")
  professionName   String   @map("profession_name")
  professionGroup  String   @map("profession_group")
  participantCount Int      @default(0) @map("participant_count")
  projectCount     Int      @default(0) @map("project_count")
  averageProjects  Float    @default(0) @map("average_projects")
  percentage       Float    @default(0) @map("percentage")
  calculatedAt     DateTime @default(now()) @map("calculated_at")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  @@unique([periodType, periodStart, periodEnd, professionCode])
  @@index([periodType])
  @@index([professionCode])
  @@map("project_participation_by_profession")
}

model StaffProjectParticipationStats {
  id                  String    @id @default(cuid())
  userId              String    @unique @map("user_id")
  totalProjectsJoined Int       @default(0) @map("total_projects_joined")
  activeProjects      Int       @default(0) @map("active_projects")
  completedProjects   Int       @default(0) @map("completed_projects")
  projectsLast6Months Int       @default(0) @map("projects_last_6months")
  projectsThisYear    Int       @default(0) @map("projects_this_year")
  participationRate   Float     @default(0) @map("participation_rate")
  departmentAvgRate   Float     @default(0) @map("department_avg_rate")
  isBelowAverage      Boolean   @default(false) @map("is_below_average")
  lastJoinedAt        DateTime? @map("last_joined_at")
  daysSinceLastJoin   Int?      @map("days_since_last_join")
  recommendationsSent Int       @default(0) @map("recommendations_sent")
  lastRecommendedAt   DateTime? @map("last_recommended_at")
  calculatedAt        DateTime  @default(now()) @map("calculated_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([participationRate])
  @@index([isBelowAverage])
  @@index([departmentAvgRate])
  @@index([lastJoinedAt])
  @@map("staff_project_participation_stats")
}

model ProjectDiversityAnalysis {
  id                       String   @id @default(cuid())
  projectId                String   @unique @map("project_id")
  nursesCount              Int      @default(0) @map("nurses_count")
  doctorsCount             Int      @default(0) @map("doctors_count")
  adminCount               Int      @default(0) @map("admin_count")
  rehabCount               Int      @default(0) @map("rehab_count")
  pharmacistCount          Int      @default(0) @map("pharmacist_count")
  medicalTechCount         Int      @default(0) @map("medical_tech_count")
  othersCount              Int      @default(0) @map("others_count")
  gen20sCount              Int      @default(0) @map("gen_20s_count")
  gen30sCount              Int      @default(0) @map("gen_30s_count")
  gen40sCount              Int      @default(0) @map("gen_40s_count")
  gen50sCount              Int      @default(0) @map("gen_50s_count")
  gen60sCount              Int      @default(0) @map("gen_60s_count")
  departmentsCount         Int      @default(0) @map("departments_count")
  departmentList           String?  @map("department_list")
  professionDiversityScore Float    @default(0) @map("profession_diversity_score")
  generationDiversityScore Float    @default(0) @map("generation_diversity_score")
  departmentDiversityScore Float    @default(0) @map("department_diversity_score")
  overallDiversityScore    Float    @default(0) @map("overall_diversity_score")
  targetDiversityScore     Float    @default(75) @map("target_diversity_score")
  recommendedProfessions   String?  @map("recommended_professions")
  calculatedAt             DateTime @default(now()) @map("calculated_at")
  updatedAt                DateTime @updatedAt @map("updated_at")
  project                  Post     @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([overallDiversityScore])
  @@index([professionDiversityScore])
  @@map("project_diversity_analysis")
}

model SkillSummaryCache {
  id                String   @id @default(cuid())
  skillId           String   @unique @map("skill_id")
  skillName         String   @map("skill_name")
  skillCategory     String   @map("skill_category")
  totalStaff        Int      @default(0) @map("total_staff")
  expertCount       Int      @default(0) @map("expert_count")
  advancedCount     Int      @default(0) @map("advanced_count")
  intermediateCount Int      @default(0) @map("intermediate_count")
  basicCount        Int      @default(0) @map("basic_count")
  averageLevel      Float    @default(0) @map("average_level")
  activeProjects    Int      @default(0) @map("active_projects")
  recommendations   Int      @default(0) @map("recommendations")
  lastSyncedAt      DateTime @default(now()) @map("last_synced_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@index([skillName])
  @@index([skillCategory])
  @@index([totalStaff])
  @@map("skill_summary_cache")
}

model ProjectRecommendationLog {
  id                 String    @id @default(cuid())
  userId             String    @map("user_id")
  projectId          String    @map("project_id")
  matchScore         Int       @map("match_score")
  reasons            String    @map("reasons")
  recommendedBy      String    @map("recommended_by")
  sentAt             DateTime  @default(now()) @map("sent_at")
  viewedAt           DateTime? @map("viewed_at")
  acceptedAt         DateTime? @map("accepted_at")
  rejectedAt         DateTime? @map("rejected_at")
  rejectionReason    String?   @map("rejection_reason")
  recommendationType String    @default("auto") @map("recommendation_type")
  priority           String    @default("medium") @map("priority")
  project            Post      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([projectId])
  @@index([sentAt])
  @@index([acceptedAt])
  @@map("project_recommendation_logs")
}

model EvaluationNotification {
  id                   String    @id @default(cuid())
  employeeId           String    @map("employee_id")
  employeeName         String    @map("employee_name")
  evaluationPeriod     String    @map("evaluation_period")
  evaluationScore      Int       @map("evaluation_score")
  evaluationGrade      String    @map("evaluation_grade")
  facilityGrade        String?   @map("facility_grade")
  corporateGrade       String?   @map("corporate_grade")
  overallGrade         String?   @map("overall_grade")
  overallScore         Int?      @map("overall_score")
  disclosureDate       DateTime  @map("disclosure_date")
  appealDeadline       DateTime  @map("appeal_deadline")
  daysUntilDeadline    Int?      @map("days_until_deadline")
  isUrgent             Boolean   @default(false) @map("is_urgent")
  notificationStatus   String    @default("pending") @map("notification_status")
  notificationSentAt   DateTime? @map("notification_sent_at")
  notificationReadAt   DateTime? @map("notification_read_at")
  appealStatus         String    @default("none") @map("appeal_status")
  appealId             String?   @map("appeal_id")
  appealSubmittedAt    DateTime? @map("appeal_submitted_at")
  medicalSystemUrl     String?   @map("medical_system_url")
  medicalSystemEventId String?   @unique @map("medical_system_event_id")
  emailSent            Boolean   @default(false) @map("email_sent")
  pushSent             Boolean   @default(false) @map("push_sent")
  smsSent              Boolean   @default(false) @map("sms_sent")
  emailSentAt          DateTime? @map("email_sent_at")
  pushSentAt           DateTime? @map("push_sent_at")
  smsSentAt            DateTime? @map("sms_sent_at")
  deliveryFailureCount Int       @default(0) @map("delivery_failure_count")
  lastDeliveryError    String?   @map("last_delivery_error")
  priority             String    @default("high") @map("priority")
  additionalMessage    String?   @map("additional_message")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")
  employee             User      @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId])
  @@index([notificationStatus])
  @@index([appealStatus])
  @@index([disclosureDate])
  @@index([appealDeadline])
  @@index([daysUntilDeadline])
  @@index([isUrgent])
  @@index([evaluationPeriod])
  @@index([employeeId, evaluationPeriod])
  @@index([notificationStatus, disclosureDate])
  @@map("evaluation_notifications")
}

model NotificationSettings {
  id                       String   @id @default(cuid())
  userId                   String   @unique @map("user_id")
  enableEmailNotifications Boolean  @default(true) @map("enable_email_notifications")
  enablePushNotifications  Boolean  @default(true) @map("enable_push_notifications")
  enableSmsNotifications   Boolean  @default(false) @map("enable_sms_notifications")
  reminderDaysBefore       Int      @default(3) @map("reminder_days_before")
  enableDeadlineReminder   Boolean  @default(true) @map("enable_deadline_reminder")
  autoMarkAsRead           Boolean  @default(false) @map("auto_mark_as_read")
  quietHoursStart          String?  @map("quiet_hours_start")
  quietHoursEnd            String?  @map("quiet_hours_end")
  enableQuietHours         Boolean  @default(false) @map("enable_quiet_hours")
  createdAt                DateTime @default(now()) @map("created_at")
  updatedAt                DateTime @updatedAt @map("updated_at")
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_settings")
}

/// 退職処理記録テーブル
/// 緊急退職処理の4ステップフローを記録
model RetirementProcess {
  id                       String    @id @default(cuid())
  targetUserId             String    @map("target_user_id")
  targetEmployeeId         String?   @map("target_employee_id")
  targetUserName           String?   @map("target_user_name")
  initiatedBy              String    @map("initiated_by")
  initiatorEmployeeId      String?   @map("initiator_employee_id")
  initiatorName            String?   @map("initiator_name")
  initiatorLevel           Float     @map("initiator_level")
  preserveAnonymousContent Boolean   @default(true) @map("preserve_anonymous_content")
  anonymizationLevel       String    @default("department") @map("anonymization_level")
  retentionPeriod          Int       @default(24) @map("retention_period")
  currentStep              Int       @default(1) @map("current_step")
  status                   String    @default("in_progress") @map("status")
  step1CompletedAt         DateTime? @map("step1_completed_at")
  step2CompletedAt         DateTime? @map("step2_completed_at")
  step3CompletedAt         DateTime? @map("step3_completed_at")
  step4CompletedAt         DateTime? @map("step4_completed_at")
  syncToStaffSystem        Boolean   @default(false) @map("sync_to_staff_system")
  syncedAt                 DateTime? @map("synced_at")
  completedAt              DateTime? @map("completed_at")
  errorMessage             String?   @map("error_message")
  createdAt                DateTime  @default(now()) @map("created_at")
  updatedAt                DateTime  @updatedAt @map("updated_at")

  @@index([targetUserId])
  @@index([initiatedBy])
  @@index([status])
  @@index([currentStep])
  @@index([syncToStaffSystem])
  @@map("retirement_processes")
}

/// サイドバーメニュー設定テーブル
/// 議題モード・プロジェクト化モード・共通メニューの表示設定を管理
model SidebarMenuConfig {
  id               String    @id @default(cuid())
  menuItemId       String    @map("menu_item_id")
  menuCategory     String    @map("menu_category")
  menuSubcategory  String?   @map("menu_subcategory")
  icon             String    @map("icon")
  label            String    @map("label")
  path             String    @map("path")
  description      String?   @map("description")
  isVisible        Boolean   @default(true) @map("is_visible")
  displayOrder     Int       @default(0) @map("display_order")
  showOnDesktop    Boolean   @default(true) @map("show_on_desktop")
  showOnMobile     Boolean   @default(true) @map("show_on_mobile")
  showOnTablet     Boolean   @default(true) @map("show_on_tablet")
  visibleForLevels String?   @map("visible_for_levels")
  showNewBadge     Boolean   @default(false) @map("show_new_badge")
  newBadgeUntil    DateTime? @map("new_badge_until")
  showBadge        Boolean   @default(false) @map("show_badge")
  badgeType        String?   @map("badge_type")
  adminNotes       String?   @map("admin_notes")
  isCustom         Boolean   @default(false) @map("is_custom")
  isSystem         Boolean   @default(false) @map("is_system")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  @@unique([menuItemId, menuCategory], name: "unique_menu_config")
  @@index([menuCategory])
  @@index([isVisible])
  @@index([displayOrder])
  @@map("sidebar_menu_configs")
}

/// エグゼクティブ戦略分析結果テーブル
/// 医療システムのLlama 3.2 8Bから受信した戦略分析結果を保存
/// Phase 18.5（2026年1月）で本格稼働予定
model ExecutiveStrategicInsight {
  id                 String    @id @default(cuid())
  analysisDate       DateTime  @map("analysis_date")
  insightType        String    @map("insight_type") // "priority_action" | "success_case" | "prediction" | "strategic_recommendation"
  severity           String?   @map("severity") // "low" | "medium" | "high"
  title              String    @map("title")
  analysis           String    @map("analysis")
  rootCause          String?   @map("root_cause")
  recommendedActions Json      @map("recommended_actions") // string[]
  bestPractice       Json?     @map("best_practice") // { source: string, method: string, result: string }
  predictions        Json?     @map("predictions") // { metric: string, currentValue: number, predictedValue: number, timeframe: string, confidence: number, condition: string }
  strategicData      Json?     @map("strategic_data") // 追加の戦略データ（カテゴリ、アクション、期待効果等）
  isAcknowledged     Boolean   @default(false) @map("is_acknowledged")
  acknowledgedBy     String?   @map("acknowledged_by")
  acknowledgedAt     DateTime? @map("acknowledged_at")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  @@index([analysisDate])
  @@index([insightType])
  @@index([severity])
  @@index([isAcknowledged])
  @@index([analysisDate, insightType])
  @@map("executive_strategic_insights")
}

/// 期限到達判断履歴テーブル
/// Phase 6: 期限到達提案の判断記録を管理
model ExpiredEscalationDecision {
  id              String   @id @default(cuid())
  postId          String   @map("post_id")
  deciderId       String   @map("decider_id")
  decision        String   @map("decision") // 'approve_at_current_level' | 'downgrade' | 'reject'
  decisionReason  String   @map("decision_reason")
  currentScore    Int      @map("current_score")
  targetScore     Int      @map("target_score")
  achievementRate Float    @map("achievement_rate")
  daysOverdue     Int      @map("days_overdue")
  agendaLevel     String   @map("agenda_level")
  proposalType    String?  @map("proposal_type")
  department      String?  @map("department")
  facilityId      String?  @map("facility_id")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  post    Post @relation("ExpiredEscalationDecisions", fields: [postId], references: [id], onDelete: Cascade)
  decider User @relation("ExpiredDecisions", fields: [deciderId], references: [id])

  @@index([postId])
  @@index([deciderId])
  @@index([facilityId])
  @@index([createdAt])
  @@index([decision])
  @@map("expired_escalation_decisions")
}

/// 議題提案書テーブル
/// Level 7+が作成した投稿から議題提案書を生成し、Level 8+が委員会に提出
model ProposalDocument {
  id          String @id @default(cuid())
  postId      String @map("post_id")
  title       String
  agendaLevel String @map("agenda_level")
  createdById String @map("created_by_id")
  status      String @default("draft")

  summary         String
  background      String
  objectives      String
  expectedEffects String @map("expected_effects")
  concerns        String
  counterMeasures String @map("counter_measures")

  voteAnalysis    Json  @map("vote_analysis")
  commentAnalysis Json  @map("comment_analysis")
  relatedInfo     Json? @map("related_info")

  managerNotes        String? @map("manager_notes")
  additionalContext   String? @map("additional_context")
  recommendationLevel String? @map("recommendation_level")

  targetCommittee   String?   @map("target_committee")
  submittedDate     DateTime? @map("submitted_date")
  submittedById     String?   @map("submitted_by_id")
  committeeDecision Json?     @map("committee_decision")

  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  lastModifiedDate DateTime @updatedAt @map("last_modified_date")

  post        Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdBy   User  @relation("ProposalCreator", fields: [createdById], references: [id])
  submittedBy User? @relation("ProposalSubmitter", fields: [submittedById], references: [id])

  submissionRequests CommitteeSubmissionRequest[]
  auditLogs          ProposalAuditLog[]

  @@index([postId])
  @@index([createdById])
  @@index([status])
  @@index([agendaLevel])
  @@index([targetCommittee])
  @@map("proposal_documents")
}

/// 委員会提出リクエストテーブル
model CommitteeSubmissionRequest {
  id              String    @id @default(cuid())
  documentId      String    @map("document_id")
  requestedById   String    @map("requested_by_id")
  requestedDate   DateTime  @default(now()) @map("requested_date")
  targetCommittee String    @map("target_committee")
  status          String    @default("pending")
  reviewedById    String?   @map("reviewed_by_id")
  reviewedDate    DateTime? @map("reviewed_date")
  reviewNotes     String?   @map("review_notes")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  document    ProposalDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)
  requestedBy User             @relation("SubmissionRequester", fields: [requestedById], references: [id])
  reviewedBy  User?            @relation("SubmissionApprover", fields: [reviewedById], references: [id])

  @@index([documentId])
  @@index([requestedById])
  @@index([reviewedById])
  @@index([status])
  @@index([targetCommittee])
  @@map("committee_submission_requests")
}

/// 議題提案書監査ログテーブル
model ProposalAuditLog {
  id            String   @id @default(cuid())
  documentId    String   @map("document_id")
  userId        String   @map("user_id")
  userName      String   @map("user_name")
  userLevel     Decimal  @map("user_level")
  action        String
  details       String?
  changedFields Json?    @map("changed_fields")
  timestamp     DateTime @default(now())

  document ProposalDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([documentId])
  @@index([userId])
  @@index([timestamp])
  @@map("proposal_audit_logs")
}

/// 投票設定変更履歴テーブル
model VotingSettingChangeLog {
  id String @id @default(cuid())

  // 変更基本情報
  mode        String // 'agenda' | 'project' | 'both'
  category    String // 変更カテゴリ
  subcategory String? // サブカテゴリ（詳細分類）

  // 変更内容
  changeDescription String // 変更内容の説明
  impactDescription String? // 影響範囲の説明

  // 変更前後の値（JSON）
  beforeValue Json? // 変更前の設定値
  afterValue  Json? // 変更後の設定値

  // 変更者情報
  changedBy      String // 変更者ユーザーID
  changedByLevel Decimal // 変更時の権限レベル
  changedAt      DateTime @default(now())

  // ステータス
  status       String    @default("active") // 'active' | 'reverted' | 'superseded'
  revertedAt   DateTime?
  revertedBy   String?
  revertReason String?

  // 関連エンティティ
  relatedEntityType String? // 'VotingGroup' | 'AgendaModeConfig' | 'ProjectModeConfig'
  relatedEntityId   String? // 関連エンティティのID

  // メタデータ
  metadata Json? // 追加情報（影響人数、関連部署など）

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user           User  @relation("SettingChangeUser", fields: [changedBy], references: [id])
  revertedByUser User? @relation("SettingRevertUser", fields: [revertedBy], references: [id])

  @@index([changedAt])
  @@index([mode])
  @@index([category])
  @@index([changedBy])
  @@index([status])
  @@index([mode, changedAt])
  @@index([relatedEntityType, relatedEntityId])
  @@map("voting_setting_change_logs")
}
