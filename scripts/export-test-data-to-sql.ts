/**
 * Phase 6 ÊúüÈôêÂà∞ÈÅîÂà§Êñ≠„ÉÜ„Çπ„Éà„Éá„Éº„Çø - SQL„Ç®„ÇØ„Çπ„Éù„Éº„Éà
 *
 * ÂÆüË°åÊñπÊ≥ï:
 * npx tsx scripts/export-test-data-to-sql.ts
 */

import { PrismaClient } from '@prisma/client';
import fs from 'fs';
import path from 'path';

const prisma = new PrismaClient();

async function exportTestDataToSQL() {
  console.log('üì§ „ÉÜ„Çπ„Éà„Éá„Éº„ÇøSQL„Ç®„ÇØ„Çπ„Éù„Éº„ÉàÈñãÂßã...');

  try {
    const decisions = await prisma.expiredEscalationDecision.findMany({
      orderBy: {
        createdAt: 'desc'
      },
      take: 100
    });

    if (decisions.length === 0) {
      console.warn('‚ö†Ô∏è Ë≠¶Âëä: Âà§Êñ≠Â±•Ê≠¥„Éá„Éº„Çø„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ');
      console.log('üí° ÂÖà„Å´ generate-expired-escalation-test-data.ts „ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
      return;
    }

    // SQL INSERTÊñá„ÇíÁîüÊàê
    const sqlStatements: string[] = [];

    // „Éò„ÉÉ„ÉÄ„Éº„Ç≥„É°„É≥„Éà
    sqlStatements.push('-- Phase 6 ÊúüÈôêÂà∞ÈÅîÂà§Êñ≠Â±•Ê≠¥„ÉÜ„Çπ„Éà„Éá„Éº„Çø');
    sqlStatements.push(`-- „Ç®„ÇØ„Çπ„Éù„Éº„ÉàÊó•ÊôÇ: ${new Date().toISOString()}`);
    sqlStatements.push(`-- ‰ª∂Êï∞: ${decisions.length}‰ª∂`);
    sqlStatements.push('');

    // „ÉÜ„Éº„Éñ„É´‰ΩúÊàêÊñáÔºàÂèÇËÄÉÁî®Ôºâ
    sqlStatements.push('-- „ÉÜ„Éº„Éñ„É´‰ΩúÊàêÔºàÊó¢„Å´Â≠òÂú®„Åô„ÇãÂ†¥Âêà„ÅØ„Çπ„Ç≠„ÉÉ„ÉóÔºâ');
    sqlStatements.push('CREATE TABLE IF NOT EXISTS "expired_escalation_decisions" (');
    sqlStatements.push('  "id" TEXT NOT NULL PRIMARY KEY,');
    sqlStatements.push('  "post_id" TEXT NOT NULL,');
    sqlStatements.push('  "decider_id" TEXT NOT NULL,');
    sqlStatements.push('  "decision" TEXT NOT NULL,');
    sqlStatements.push('  "decision_reason" TEXT NOT NULL,');
    sqlStatements.push('  "current_score" INTEGER NOT NULL,');
    sqlStatements.push('  "target_score" INTEGER NOT NULL,');
    sqlStatements.push('  "achievement_rate" REAL NOT NULL,');
    sqlStatements.push('  "days_overdue" INTEGER NOT NULL,');
    sqlStatements.push('  "agenda_level" TEXT NOT NULL,');
    sqlStatements.push('  "proposal_type" TEXT,');
    sqlStatements.push('  "department" TEXT,');
    sqlStatements.push('  "facility_id" TEXT,');
    sqlStatements.push('  "created_at" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,');
    sqlStatements.push('  "updated_at" DATETIME NOT NULL');
    sqlStatements.push(');');
    sqlStatements.push('');

    // „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ‰ΩúÊàêÊñá
    sqlStatements.push('-- „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ‰ΩúÊàê');
    sqlStatements.push('CREATE INDEX IF NOT EXISTS "expired_escalation_decisions_post_id_decider_id_facility_id_created_at_decision_idx" ON "expired_escalation_decisions"("post_id", "decider_id", "facility_id", "created_at", "decision");');
    sqlStatements.push('');

    // INSERTÊñá
    sqlStatements.push('-- „Éá„Éº„ÇøÊäïÂÖ•');
    sqlStatements.push('BEGIN TRANSACTION;');
    sqlStatements.push('');

    for (const decision of decisions) {
      const values = [
        escapeSQL(decision.id),
        escapeSQL(decision.postId),
        escapeSQL(decision.deciderId),
        escapeSQL(decision.decision),
        escapeSQL(decision.decisionReason),
        decision.currentScore,
        decision.targetScore,
        decision.achievementRate,
        decision.daysOverdue,
        escapeSQL(decision.agendaLevel),
        decision.proposalType ? escapeSQL(decision.proposalType) : 'NULL',
        decision.department ? escapeSQL(decision.department) : 'NULL',
        decision.facilityId ? escapeSQL(decision.facilityId) : 'NULL',
        escapeSQL(decision.createdAt.toISOString()),
        escapeSQL(decision.updatedAt.toISOString())
      ];

      const insertSQL = `INSERT INTO "expired_escalation_decisions" ("id", "post_id", "decider_id", "decision", "decision_reason", "current_score", "target_score", "achievement_rate", "days_overdue", "agenda_level", "proposal_type", "department", "facility_id", "created_at", "updated_at") VALUES (${values.join(', ')});`;
      sqlStatements.push(insertSQL);
    }

    sqlStatements.push('');
    sqlStatements.push('COMMIT;');
    sqlStatements.push('');

    // „Çµ„Éû„É™„ÉºÁµ±Ë®à
    const approvalCount = decisions.filter(d => d.decision === 'approve_at_current_level').length;
    const downgradeCount = decisions.filter(d => d.decision === 'downgrade').length;
    const rejectCount = decisions.filter(d => d.decision === 'reject').length;
    const avgAchievementRate = decisions.reduce((sum, d) => sum + d.achievementRate, 0) / decisions.length;
    const avgDaysOverdue = decisions.reduce((sum, d) => sum + d.daysOverdue, 0) / decisions.length;

    sqlStatements.push('-- „Çµ„Éû„É™„ÉºÁµ±Ë®à');
    sqlStatements.push(`-- Á∑è‰ª∂Êï∞: ${decisions.length}‰ª∂`);
    sqlStatements.push(`-- ÊâøË™ç: ${approvalCount}‰ª∂ (${((approvalCount / decisions.length) * 100).toFixed(1)}%)`);
    sqlStatements.push(`-- „ÉÄ„Ç¶„É≥„Ç∞„É¨„Éº„Éâ: ${downgradeCount}‰ª∂ (${((downgradeCount / decisions.length) * 100).toFixed(1)}%)`);
    sqlStatements.push(`-- ‰∏çÊé°Áî®: ${rejectCount}‰ª∂ (${((rejectCount / decisions.length) * 100).toFixed(1)}%)`);
    sqlStatements.push(`-- Âπ≥ÂùáÂà∞ÈÅîÁéá: ${avgAchievementRate.toFixed(1)}%`);
    sqlStatements.push(`-- Âπ≥ÂùáÊúüÈôêË∂ÖÈÅéÊó•Êï∞: ${avgDaysOverdue.toFixed(1)}Êó•`);

    // ‰øùÂ≠ò
    const outputPath = path.join('mcp-shared', 'test-data', 'expired-escalation-history.sql');
    fs.mkdirSync(path.dirname(outputPath), { recursive: true });
    fs.writeFileSync(outputPath, sqlStatements.join('\n'), 'utf-8');

    console.log(`‚úÖ SQL„Ç®„ÇØ„Çπ„Éù„Éº„ÉàÂÆå‰∫Ü: ${outputPath}`);
    console.log(`üìä ‰ª∂Êï∞: ${decisions.length}‰ª∂`);
    console.log(`üìä „Çµ„Éû„É™„Éº:`);
    console.log(`   - ÊâøË™ç: ${approvalCount}‰ª∂ (${((approvalCount / decisions.length) * 100).toFixed(1)}%)`);
    console.log(`   - „ÉÄ„Ç¶„É≥„Ç∞„É¨„Éº„Éâ: ${downgradeCount}‰ª∂ (${((downgradeCount / decisions.length) * 100).toFixed(1)}%)`);
    console.log(`   - ‰∏çÊé°Áî®: ${rejectCount}‰ª∂ (${((rejectCount / decisions.length) * 100).toFixed(1)}%)`);
    console.log(`   - Âπ≥ÂùáÂà∞ÈÅîÁéá: ${avgAchievementRate.toFixed(1)}%`);
    console.log(`   - Âπ≥ÂùáÊúüÈôêË∂ÖÈÅéÊó•Êï∞: ${avgDaysOverdue.toFixed(1)}Êó•`);

    return { decisions, approvalCount, downgradeCount, rejectCount };

  } catch (error) {
    console.error('‚ùå „Ç®„É©„Éº:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

/**
 * SQLÊñáÂ≠óÂàó„Çí„Ç®„Çπ„Ç±„Éº„Éó
 */
function escapeSQL(value: string | null): string {
  if (value === null) return 'NULL';
  return `'${value.replace(/'/g, "''")}'`;
}

// „Çπ„ÇØ„É™„Éó„ÉàÂÆüË°å
exportTestDataToSQL()
  .then(() => {
    console.log('‚úÖ ÂÖ®Âá¶ÁêÜÂÆå‰∫Ü');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå „Ç®„É©„Éº:', error);
    process.exit(1);
  });
