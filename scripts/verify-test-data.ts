/**
 * „ÉÜ„Çπ„Éà„Éá„Éº„ÇøÊ§úË®º„Çπ„ÇØ„É™„Éó„Éà
 * ÁõÆÊ®ô„Çπ„Ç≥„Ç¢„ÅåÊ≠£„Åó„ÅèË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç
 */

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function verifyTestData() {
  console.log('üîç „ÉÜ„Çπ„Éà„Éá„Éº„ÇøÊ§úË®ºÈñãÂßã...\n');

  try {
    const decisions = await prisma.expiredEscalationDecision.findMany({
      orderBy: { createdAt: 'desc' },
      take: 20
    });

    console.log(`üìä Á∑è‰ª∂Êï∞: ${decisions.length}‰ª∂\n`);

    // Ë≠∞È°å„É¨„Éô„É´Âà•„Å´ÂàÜÈ°û
    const byLevel = {
      dept: decisions.filter(d => d.agendaLevel.includes('dept')),
      facility: decisions.filter(d => d.agendaLevel.includes('facility')),
      corp: decisions.filter(d => d.agendaLevel.includes('corp'))
    };

    console.log('„ÄêÈÉ®ÁΩ≤„É¨„Éô„É´„Äë(' + byLevel.dept.length + '‰ª∂)');
    byLevel.dept.forEach(d => {
      console.log(`  - „Çπ„Ç≥„Ç¢: ${d.currentScore}/${d.targetScore} (${d.achievementRate.toFixed(1)}%) - ${d.decision}`);
    });

    console.log('\n„ÄêÊñΩË®≠„É¨„Éô„É´„Äë(' + byLevel.facility.length + '‰ª∂)');
    byLevel.facility.forEach(d => {
      console.log(`  - „Çπ„Ç≥„Ç¢: ${d.currentScore}/${d.targetScore} (${d.achievementRate.toFixed(1)}%) - ${d.decision}`);
    });

    console.log('\n„ÄêÊ≥ï‰∫∫„É¨„Éô„É´„Äë(' + byLevel.corp.length + '‰ª∂)');
    byLevel.corp.forEach(d => {
      console.log(`  - „Çπ„Ç≥„Ç¢: ${d.currentScore}/${d.targetScore} (${d.achievementRate.toFixed(1)}%) - ${d.decision}`);
    });

    // Ê§úË®º
    console.log('\n‚úÖ Ê§úË®ºÁµêÊûú:');
    const deptOK = byLevel.dept.every(d => d.targetScore === 100);
    const facilityOK = byLevel.facility.every(d => d.targetScore === 300);
    const corpOK = byLevel.corp.every(d => d.targetScore === 600);

    console.log(`  ÈÉ®ÁΩ≤„É¨„Éô„É´ÁõÆÊ®ô„Çπ„Ç≥„Ç¢: ${deptOK ? '‚úÖ Ê≠£Â∏∏ (100ÁÇπ)' : '‚ùå Áï∞Â∏∏'}`);
    console.log(`  ÊñΩË®≠„É¨„Éô„É´ÁõÆÊ®ô„Çπ„Ç≥„Ç¢: ${facilityOK ? '‚úÖ Ê≠£Â∏∏ (300ÁÇπ)' : '‚ùå Áï∞Â∏∏'}`);
    console.log(`  Ê≥ï‰∫∫„É¨„Éô„É´ÁõÆÊ®ô„Çπ„Ç≥„Ç¢: ${corpOK ? '‚úÖ Ê≠£Â∏∏ (600ÁÇπ)' : '‚ùå Áï∞Â∏∏'}`);

  } catch (error) {
    console.error('‚ùå „Ç®„É©„Éº:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

verifyTestData()
  .then(() => {
    console.log('\n‚úÖ Ê§úË®ºÂÆå‰∫Ü');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå „Ç®„É©„Éº:', error);
    process.exit(1);
  });
