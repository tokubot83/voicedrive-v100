import React, { useState, useEffect } from 'react';
import {
  InterviewBooking,
  TimeSlot,
  InterviewStatus,
  DailySchedule,
  WeeklyStatistics,
  MedicalEmployeeProfile,
  ReminderSchedule
} from '../../types/interview';
import { InterviewBookingService } from '../../services/InterviewBookingService';
import InterviewReminderService from '../../services/InterviewReminderService';
import { usePermissions } from '../../hooks/usePermissions';
import { PermissionLevel } from '../../permissions/types/PermissionTypes';
import InterviewNotificationList from './InterviewNotificationList';
import InterviewCancellationModal from './InterviewCancellationModal';
import MedicalNotificationService from '../../services/MedicalNotificationService';
import { InterviewCancellationRequest } from '../../types/medicalNotification';

interface InterviewManagementDashboardProps {
  managerId?: string;
}

const InterviewManagementDashboard: React.FC<InterviewManagementDashboardProps> = ({ 
  managerId = 'MGR001' 
}) => {
  const bookingService = InterviewBookingService.getInstance();
  const reminderService = InterviewReminderService.getInstance();
  const medicalNotificationService = MedicalNotificationService.getInstance();
  const { metadata } = usePermissions(managerId);

  const [activeTab, setActiveTab] = useState('today');
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [bookings, setBookings] = useState<InterviewBooking[]>([]);
  const [weeklyStats, setWeeklyStats] = useState<WeeklyStatistics | null>(null);
  const [loading, setLoading] = useState(false);
  const [selectedBooking, setSelectedBooking] = useState<InterviewBooking | null>(null);
  const [unreadNotificationCount, setUnreadNotificationCount] = useState(0);
  const [showCancellationModal, setShowCancellationModal] = useState(false);
  const [bookingToCancel, setBookingToCancel] = useState<InterviewBooking | null>(null);

  // Êñ∞Ê©üËÉΩ: „É™„Éû„Ç§„É≥„ÉÄ„ÉºÁÆ°ÁêÜ
  const [reminderSchedules, setReminderSchedules] = useState<ReminderSchedule[]>([]);
  const [todaysReminders, setTodaysReminders] = useState<any[]>([]);

  // Ê®©Èôê„É¨„Éô„É´„Å´„Çà„ÇãÊ©üËÉΩÂà∂Èôê
  const canManageSchedule = metadata?.level && metadata.level >= PermissionLevel.LEVEL_5;
  const canConductInterview = metadata?.level && 
    (metadata.level === PermissionLevel.LEVEL_6 || metadata.level === PermissionLevel.LEVEL_7);
  const canViewStatistics = metadata?.level && metadata.level >= PermissionLevel.LEVEL_7;

  useEffect(() => {
    loadData();
    loadNotificationCount();
  }, [activeTab, selectedDate]);

  // ÈÄöÁü•Êï∞„ÅÆÁõ£Ë¶ñ
  useEffect(() => {
    const handleNotificationUpdate = () => {
      setUnreadNotificationCount(medicalNotificationService.getUnreadCount());
    };

    // ÂàùÊúüÂÄ§Ë®≠ÂÆö
    handleNotificationUpdate();

    // „É™„Çπ„Éä„ÉºÁôªÈå≤
    medicalNotificationService.addListener(handleNotificationUpdate);

    return () => {
      medicalNotificationService.removeListener(handleNotificationUpdate);
    };
  }, [medicalNotificationService]);

  const loadNotificationCount = () => {
    setUnreadNotificationCount(medicalNotificationService.getUnreadCount());
  };

  const loadData = async () => {
    setLoading(true);
    try {
      switch (activeTab) {
        case 'today':
          await loadTodayBookings();
          break;
        case 'weekly':
          await loadWeeklySchedule();
          break;
        case 'pending':
          await loadPendingBookings();
          break;
        case 'schedule':
          await loadScheduleManagement();
          break;
        case 'statistics':
          await loadStatistics();
          break;
        case 'reminders':
          await loadReminderManagement();
          break;
        case 'notifications':
          // ÈÄöÁü•„Çø„Éñ„ÅØÂà•„ÅÆ„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅßÁÆ°ÁêÜ„Åô„Çã„Åü„ÇÅ„ÄÅÁâπÂà•„Å™Ë™≠„ÅøËæº„Åø„ÅØ‰∏çË¶Å
          break;
      }
    } catch (error) {
      console.error('Failed to load data:', error);
    } finally {
      setLoading(false);
    }
  };

  const loadTodayBookings = async () => {
    const today = new Date();
    const todayBookings = await bookingService.getBookingsByDate(today);
    setBookings(todayBookings);
  };

  const loadWeeklySchedule = async () => {
    const startDate = new Date(selectedDate);
    startDate.setDate(startDate.getDate() - startDate.getDay() + 1); // Monday
    const endDate = new Date(startDate);
    endDate.setDate(endDate.getDate() + 4); // Friday
    
    const weeklyBookings = await bookingService.getBookingsByDateRange(startDate, endDate);
    setBookings(weeklyBookings);
  };

  const loadPendingBookings = async () => {
    const pending = await bookingService.getPendingBookings();
    setBookings(pending);
  };

  const loadScheduleManagement = async () => {
    // „Çπ„Ç±„Ç∏„É•„Éº„É´ÁÆ°ÁêÜÁî®„ÅÆ„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„ÇÄ
    const schedule = await bookingService.getAvailableSlots(selectedDate);
    // „Åì„Åì„Åß„ÅØÁ∞°Áï•Âåñ
  };

  const loadStatistics = async () => {
    const stats = await bookingService.getWeeklyStatistics(new Date());
    setWeeklyStats(stats);
  };

  const loadReminderManagement = async () => {
    try {
      // ÂÖ®ËÅ∑Âì°„ÅÆ„É™„Éû„Ç§„É≥„ÉÄ„Éº„Çπ„Ç±„Ç∏„É•„Éº„É´„ÇíÂèñÂæó
      const allReminders = await reminderService.checkAllPendingReminders();
      setReminderSchedules(allReminders);
      
      // ‰ªäÊó•ÈÄÅ‰ø°„Åô„Åπ„Åç„É™„Éû„Ç§„É≥„ÉÄ„Éº„ÇíÂèñÂæó
      const todaysReminders = await bookingService.getTodaysReminders();
      setTodaysReminders(todaysReminders);
    } catch (error) {
      console.error('Failed to load reminder data:', error);
    }
  };

  const handleRunDailyBatch = async () => {
    if (!confirm('‰ªäÊó•„ÅÆ„É™„Éû„Ç§„É≥„ÉÄ„Éº„Éê„ÉÉ„ÉÅÂá¶ÁêÜ„ÇíÂÆüË°å„Åó„Åæ„Åô„ÅãÔºü')) return;
    
    setLoading(true);
    try {
      await bookingService.runDailyReminderBatch();
      await loadReminderManagement(); // „Éá„Éº„Çø„ÇíÂÜçË™≠„ÅøËæº„Åø
      alert('„Éê„ÉÉ„ÉÅÂá¶ÁêÜ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü');
    } catch (error) {
      alert('„Éê„ÉÉ„ÉÅÂá¶ÁêÜ„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
    } finally {
      setLoading(false);
    }
  };

  const handleStatusUpdate = async (bookingId: string, newStatus: InterviewStatus) => {
    try {
      await bookingService.updateBookingStatus(bookingId, newStatus, managerId);
      loadData(); // „É™„É≠„Éº„Éâ
      alert('„Çπ„ÉÜ„Éº„Çø„Çπ„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü');
    } catch (error) {
      alert('„Çπ„ÉÜ„Éº„Çø„ÇπÊõ¥Êñ∞„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    }
  };

  // Èù¢Ë´á„Ç≠„É£„É≥„Çª„É´„Éú„Çø„É≥„ÅÆ„ÇØ„É™„ÉÉ„ÇØ
  const handleCancelBookingClick = (booking: InterviewBooking) => {
    setBookingToCancel(booking);
    setShowCancellationModal(true);
  };

  // „Ç≠„É£„É≥„Çª„É´Âá¶ÁêÜ„ÅÆÂÆüË°å
  const handleCancelBooking = async (cancellationRequest: InterviewCancellationRequest) => {
    try {
      // ÂåªÁôÇ„Ç∑„Çπ„ÉÜ„É†„Å´„Ç≠„É£„É≥„Çª„É´Ë¶ÅÊ±Ç„ÇíÈÄÅ‰ø°
      await medicalNotificationService.sendCancellationRequest(cancellationRequest);

      // „É≠„Éº„Ç´„É´„ÅÆ‰∫àÁ¥Ñ„Çπ„ÉÜ„Éº„Çø„Çπ„ÇíÊõ¥Êñ∞
      await bookingService.updateBookingStatus(cancellationRequest.reservationId, 'cancelled', managerId);

      // „Éá„Éº„Çø„ÇíÂÜçË™≠„ÅøËæº„Åø
      loadData();

      // „É¢„Éº„ÉÄ„É´„ÇíÈñâ„Åò„Çã
      setShowCancellationModal(false);
      setBookingToCancel(null);

      // ÊàêÂäü„É°„ÉÉ„Çª„Éº„Ç∏
      if (cancellationRequest.cancellationType === 'emergency') {
        alert('Á∑äÊÄ•„Ç≠„É£„É≥„Çª„É´„ÇíÂèó„Åë‰ªò„Åë„Åæ„Åó„Åü„ÄÇÊãÖÂΩìËÄÖ„Åã„Çâ„ÅÆÈÄ£Áµ°„Çí„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑ„ÄÇ');
      } else {
        alert('Èù¢Ë´á„Ç≠„É£„É≥„Çª„É´„ÇíÂèó„Åë‰ªò„Åë„Åæ„Åó„Åü„ÄÇ');
      }
    } catch (error) {
      console.error('Cancellation failed:', error);
      alert('„Ç≠„É£„É≥„Çª„É´Âá¶ÁêÜ„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ');
    }
  };

  // „Ç≠„É£„É≥„Çª„É´„É¢„Éº„ÉÄ„É´„ÇíÈñâ„Åò„Çã
  const handleCloseCancellationModal = () => {
    setShowCancellationModal(false);
    setBookingToCancel(null);
  };

  const handleScheduleBlock = async (date: Date, slotId: string) => {
    if (!canManageSchedule) {
      alert('„Çπ„Ç±„Ç∏„É•„Éº„É´ÁÆ°ÁêÜ„ÅÆÊ®©Èôê„Åå„ÅÇ„Çä„Åæ„Åõ„Çì');
      return;
    }

    try {
      await bookingService.blockTimeSlot(date, slotId, 'maintenance', managerId);
      alert('ÊôÇÈñìÊû†„Çí„Éñ„É≠„ÉÉ„ÇØ„Åó„Åæ„Åó„Åü');
      loadData();
    } catch (error) {
      alert('„Éñ„É≠„ÉÉ„ÇØ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    }
  };

  const renderTabNavigation = () => (
    <div className="flex border-b border-gray-200 mb-6">
      {[
        { key: 'today', label: '‰ªäÊó•„ÅÆ‰∫àÁ¥Ñ', icon: 'üìÖ' },
        { key: 'weekly', label: 'ÈÄ±Èñì„Çπ„Ç±„Ç∏„É•„Éº„É´', icon: 'üìÜ' },
        { key: 'pending', label: 'ÊâøË™çÂæÖ„Å°', icon: '‚è≥' },
        { key: 'notifications', label: 'Èù¢Ë´áÁ¢∫ÂÆöÈÄöÁü•', icon: 'üéØ', badgeCount: unreadNotificationCount },
        canManageSchedule && { key: 'schedule', label: '„Çπ„Ç±„Ç∏„É•„Éº„É´ÁÆ°ÁêÜ', icon: '‚öôÔ∏è' },
        canManageSchedule && { key: 'reminders', label: '„É™„Éû„Ç§„É≥„ÉÄ„ÉºÁÆ°ÁêÜ', icon: 'üîî' },
        canViewStatistics && { key: 'statistics', label: 'Áµ±Ë®à', icon: 'üìä' }
      ].filter(Boolean).map((tab: any) => (
        <button
          key={tab.key}
          onClick={() => setActiveTab(tab.key)}
          className={`
            px-6 py-3 font-medium text-sm transition-colors relative
            ${activeTab === tab.key
              ? 'border-b-2 border-blue-600 text-blue-600'
              : 'text-gray-600 hover:text-gray-900'
            }
          `}
        >
          <div className="flex items-center">
            {tab?.icon && <span className="mr-2">{tab.icon}</span>}
            {tab.label || 'Êú™Ë®≠ÂÆö'}
            {tab.badgeCount > 0 && (
              <span className="ml-2 bg-red-500 text-white text-xs px-2 py-0.5 rounded-full font-medium">
                {tab.badgeCount}
              </span>
            )}
          </div>
        </button>
      ))}
    </div>
  );

  const renderTodayBookings = () => (
    <div className="space-y-4">
      <h2 className="text-xl font-semibold mb-4">
        {new Date().toLocaleDateString('ja-JP', { 
          year: 'numeric', 
          month: 'long', 
          day: 'numeric',
          weekday: 'long'
        })}„ÅÆ‰∫àÁ¥Ñ
      </h2>
      
      {bookings.length === 0 ? (
        <div className="text-center py-8 text-gray-500">
          Êú¨Êó•„ÅÆ‰∫àÁ¥Ñ„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì
        </div>
      ) : (
        <div className="grid gap-4">
          {bookings.map(booking => (
            <div 
              key={booking.id}
              className="bg-white border rounded-lg p-4 hover:shadow-md transition-shadow"
            >
              <div className="flex justify-between items-start mb-2">
                <div>
                  <h3 className="font-semibold text-lg">
                    {booking.timeSlot.startTime} - {booking.timeSlot.endTime}
                  </h3>
                  <p className="text-gray-600">
                    Á§æÂì°ID: {booking.employeeId} | {booking.employeeName}
                  </p>
                </div>
                <span className={`
                  px-3 py-1 rounded-full text-sm font-medium
                  ${booking.status === 'confirmed' 
                    ? 'bg-green-100 text-green-800'
                    : booking.status === 'pending'
                    ? 'bg-yellow-100 text-yellow-800'
                    : 'bg-gray-100 text-gray-800'
                  }
                `}>
                  {booking.status === 'confirmed' ? 'Á¢∫ÂÆö' : 
                   booking.status === 'pending' ? 'Áî≥Ë´ã‰∏≠' : 
                   booking.status === 'completed' ? 'ÂÆå‰∫Ü' : '„Ç≠„É£„É≥„Çª„É´'}
                </span>
              </div>
              
              <div className="text-sm text-gray-600 mb-3">
                <p>Á®ÆÈ°û: {booking.interviewType} | „Ç´„ÉÜ„Ç¥„É™: {booking.category}</p>
                {booking.description && (
                  <p className="mt-1">Áõ∏Ë´áÂÜÖÂÆπ: {booking.description}</p>
                )}
              </div>
              
              <div className="flex gap-2 mt-3">
                {canConductInterview && booking.status === 'confirmed' && (
                  <>
                    <button
                      onClick={() => handleStatusUpdate(booking.id, 'completed')}
                      className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors"
                    >
                      Èù¢Ë´áÂÆå‰∫Ü
                    </button>
                    <button
                      onClick={() => setSelectedBooking(booking)}
                      className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"
                    >
                      Ë©≥Á¥∞Ë°®Á§∫
                    </button>
                  </>
                )}

                {/* „Ç≠„É£„É≥„Çª„É´„Éú„Çø„É≥ÔºàÁ¢∫ÂÆöÊ∏à„Åø„ÉªÁ¢∫Ë™ç‰∏≠„ÅÆ‰∫àÁ¥Ñ„Å´Ë°®Á§∫Ôºâ */}
                {(booking.status === 'confirmed' || booking.status === 'pending') && (
                  <button
                    onClick={() => handleCancelBookingClick(booking)}
                    className={`px-4 py-2 text-white rounded hover:opacity-90 transition-colors ${
                      new Date(booking.bookingDate).toDateString() === new Date().toDateString()
                        ? 'bg-red-600 hover:bg-red-700' // ÂΩìÊó•„ÅØËµ§Ëâ≤
                        : 'bg-orange-600 hover:bg-orange-700' // ‰∫ãÂâç„ÅØÊ©ôËâ≤
                    }`}
                  >
                    {new Date(booking.bookingDate).toDateString() === new Date().toDateString()
                      ? '‚ö†Ô∏è ÂΩìÊó•„Ç≠„É£„É≥„Çª„É´'
                      : 'üìù „Ç≠„É£„É≥„Çª„É´'}
                  </button>
                )}
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );

  const renderWeeklySchedule = () => {
    const weekDays = ['Êúà', 'ÁÅ´', 'Ê∞¥', 'Êú®', 'Èáë'];
    const timeSlots = [
      '13:40-14:10',
      '14:20-14:50', 
      '15:00-15:30',
      '15:40-16:10',
      '16:20-16:50'
    ];

    return (
      <div>
        <h2 className="text-xl font-semibold mb-4">ÈÄ±Èñì„Çπ„Ç±„Ç∏„É•„Éº„É´</h2>
        
        <div className="overflow-x-auto">
          <table className="min-w-full bg-white border rounded-lg">
            <thead>
              <tr className="bg-gray-50">
                <th className="p-3 border-b text-left">ÊôÇÈñì</th>
                {weekDays.map(day => (
                  <th key={day} className="p-3 border-b text-center">{day}</th>
                ))}
              </tr>
            </thead>
            <tbody>
              {timeSlots.map((slot, slotIndex) => (
                <tr key={slot} className="hover:bg-gray-50">
                  <td className="p-3 border-b font-medium">{slot}</td>
                  {weekDays.map((day, dayIndex) => {
                    const booking = bookings.find(b => {
                      const bookingDate = new Date(b.bookingDate);
                      return bookingDate.getDay() === dayIndex + 1 && 
                             b.timeSlot.startTime === slot.split('-')[0];
                    });
                    
                    return (
                      <td key={day} className="p-3 border-b text-center">
                        {booking ? (
                          <div className="bg-blue-100 text-blue-800 p-2 rounded text-xs">
                            {booking.employeeName}
                          </div>
                        ) : (
                          <div className="text-gray-400">-</div>
                        )}
                      </td>
                    );
                  })}
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    );
  };

  const renderPendingBookings = () => (
    <div className="space-y-4">
      <h2 className="text-xl font-semibold mb-4">ÊâøË™çÂæÖ„Å°‰∫àÁ¥Ñ</h2>
      
      {bookings.filter(b => b.status === 'pending').length === 0 ? (
        <div className="text-center py-8 text-gray-500">
          ÊâøË™çÂæÖ„Å°„ÅÆ‰∫àÁ¥Ñ„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì
        </div>
      ) : (
        <div className="grid gap-4">
          {bookings.filter(b => b.status === 'pending').map(booking => (
            <div 
              key={booking.id}
              className="bg-yellow-50 border border-yellow-200 rounded-lg p-4"
            >
              <div className="flex justify-between items-start mb-3">
                <div>
                  <h3 className="font-semibold">
                    {booking.employeeName} ({booking.employeeId})
                  </h3>
                  <p className="text-sm text-gray-600">
                    Áî≥Ë´ãÊó•: {new Date(booking.createdAt).toLocaleDateString('ja-JP')}
                  </p>
                </div>
              </div>
              
              <div className="text-sm mb-3">
                <p>Â∏åÊúõÊó•ÊôÇ:</p>
                <ul className="ml-4">
                  {booking.preferredSlots?.map((slot, index) => (
                    <li key={index}>
                      ‚Ä¢ {new Date(slot.date).toLocaleDateString('ja-JP')} {slot.startTime}-{slot.endTime}
                    </li>
                  ))}
                </ul>
              </div>
              
              <div className="flex gap-2">
                <button
                  onClick={() => handleStatusUpdate(booking.id, 'confirmed')}
                  className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors"
                >
                  ÊâøË™ç
                </button>
                <button
                  onClick={() => handleStatusUpdate(booking.id, 'cancelled')}
                  className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors"
                >
                  Âç¥‰∏ã
                </button>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );

  const renderScheduleManagement = () => (
    <div className="space-y-6">
      <h2 className="text-xl font-semibold mb-4">„Çπ„Ç±„Ç∏„É•„Éº„É´ÁÆ°ÁêÜ</h2>
      
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
        <h3 className="font-semibold mb-3">ÊôÇÈñìÊû†„Éñ„É≠„ÉÉ„ÇØË®≠ÂÆö</h3>
        <div className="flex items-end gap-4">
          <div>
            <label className="block text-sm font-medium mb-1">Êó•‰ªò</label>
            <input
              type="date"
              value={selectedDate.toISOString().split('T')[0]}
              onChange={(e) => setSelectedDate(new Date(e.target.value))}
              className="px-3 py-2 border rounded-lg"
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">ÊôÇÈñìÊû†</label>
            <select className="px-3 py-2 border rounded-lg">
              <option value="slot1">13:40-14:10</option>
              <option value="slot2">14:20-14:50</option>
              <option value="slot3">15:00-15:30</option>
              <option value="slot4">15:40-16:10</option>
              <option value="slot5">16:20-16:50</option>
            </select>
          </div>
          <button
            onClick={() => handleScheduleBlock(selectedDate, 'slot1')}
            className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors"
          >
            „Éñ„É≠„ÉÉ„ÇØ
          </button>
        </div>
      </div>
      
      <div className="bg-green-50 border border-green-200 rounded-lg p-4">
        <h3 className="font-semibold mb-3">Èù¢Ë´áËÄÖ„Ç¢„Çµ„Ç§„É≥</h3>
        <p className="text-sm text-gray-600">
          Level 6-7„ÅÆ„Çπ„Çø„ÉÉ„Éï„Å´Èù¢Ë´á„ÇíÂâ≤„ÇäÂΩì„Å¶„Çã„Åì„Å®„Åå„Åß„Åç„Åæ„Åô
        </p>
      </div>
    </div>
  );

  const renderStatistics = () => (
    <div className="space-y-6">
      <h2 className="text-xl font-semibold mb-4">Áµ±Ë®àÊÉÖÂ†±</h2>
      
      {weeklyStats && (
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="bg-white border rounded-lg p-4">
            <h3 className="text-sm font-medium text-gray-600">‰ªäÈÄ±„ÅÆÈù¢Ë´áÊï∞</h3>
            <p className="text-2xl font-bold text-blue-600 mt-2">
              {weeklyStats.totalBookings}
            </p>
          </div>
          
          <div className="bg-white border rounded-lg p-4">
            <h3 className="text-sm font-medium text-gray-600">ÂÆå‰∫ÜÁéá</h3>
            <p className="text-2xl font-bold text-green-600 mt-2">
              {weeklyStats.completionRate}%
            </p>
          </div>
          
          <div className="bg-white border rounded-lg p-4">
            <h3 className="text-sm font-medium text-gray-600">Âπ≥ÂùáÈù¢Ë´áÊôÇÈñì</h3>
            <p className="text-2xl font-bold text-purple-600 mt-2">
              {weeklyStats.averageDuration}ÂàÜ
            </p>
          </div>
        </div>
      )}
      
      <div className="bg-white border rounded-lg p-6">
        <h3 className="font-semibold mb-4">„Ç´„ÉÜ„Ç¥„É™Âà•ÈõÜË®à</h3>
        <div className="space-y-2">
          {weeklyStats?.categoryBreakdown && Object.entries(weeklyStats.categoryBreakdown).map(([category, count]) => (
            <div key={category} className="flex justify-between">
              <span>{category}</span>
              <span className="font-medium">{count}‰ª∂</span>
            </div>
          ))}
        </div>
      </div>
    </div>
  );

  const renderReminderManagement = () => (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-xl font-semibold">„É™„Éû„Ç§„É≥„ÉÄ„ÉºÁÆ°ÁêÜ</h2>
        <button
          onClick={handleRunDailyBatch}
          disabled={loading}
          className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 transition-colors"
        >
          {loading ? 'ÂÆüË°å‰∏≠...' : '‰ªäÊó•„ÅÆ„É™„Éû„Ç§„É≥„ÉÄ„ÉºÈÄÅ‰ø°'}
        </button>
      </div>

      {/* ‰ªäÊó•„ÅÆ„É™„Éû„Ç§„É≥„ÉÄ„Éº‰∏ÄË¶ß */}
      <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-6">
        <h3 className="font-semibold mb-4 text-yellow-800">üîî Êú¨Êó•ÈÄÅ‰ø°‰∫àÂÆö„ÅÆ„É™„Éû„Ç§„É≥„ÉÄ„Éº</h3>
        {todaysReminders.length === 0 ? (
          <p className="text-gray-600">Êú¨Êó•ÈÄÅ‰ø°‰∫àÂÆö„ÅÆ„É™„Éû„Ç§„É≥„ÉÄ„Éº„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì</p>
        ) : (
          <div className="space-y-3">
            {todaysReminders.map((reminder, index) => (
              <div key={index} className="bg-white border border-yellow-300 rounded-lg p-4">
                <div className="flex justify-between items-start">
                  <div>
                    <h4 className="font-medium text-gray-900">
                      {reminder.employeeName} ({reminder.employeeId})
                    </h4>
                    <p className="text-sm text-gray-600 mt-1">
                      Èù¢Ë´áÁ®ÆÂà•: {reminder.interviewType}
                    </p>
                    <p className="text-sm text-gray-600">
                      Ê¨°ÂõûÈù¢Ë´á‰∫àÂÆö: {new Date(reminder.nextInterviewDate).toLocaleDateString('ja-JP')}
                    </p>
                  </div>
                  <span className="text-xs bg-yellow-100 text-yellow-800 px-2 py-1 rounded">
                    {reminder.reminderType}
                  </span>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* ÂÖ®‰Ωì„ÅÆ„É™„Éû„Ç§„É≥„ÉÄ„Éº„Çπ„Ç±„Ç∏„É•„Éº„É´ */}
      <div className="bg-white border rounded-lg p-6">
        <h3 className="font-semibold mb-4">üìÖ ÂÖ®ËÅ∑Âì°„É™„Éû„Ç§„É≥„ÉÄ„Éº„Çπ„Ç±„Ç∏„É•„Éº„É´</h3>
        
        <div className="mb-4">
          <p className="text-sm text-gray-600">
            ÂêàË®à: {reminderSchedules.length}‰ª∂„ÅÆ„É™„Éû„Ç§„É≥„ÉÄ„Éº„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åô
          </p>
        </div>

        {reminderSchedules.length === 0 ? (
          <p className="text-gray-500 text-center py-8">
            „É™„Éû„Ç§„É≥„ÉÄ„Éº„Çπ„Ç±„Ç∏„É•„Éº„É´„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì
          </p>
        ) : (
          <div className="overflow-x-auto">
            <table className="min-w-full">
              <thead>
                <tr className="border-b">
                  <th className="text-left py-2 px-3">ËÅ∑Âì°Âêç</th>
                  <th className="text-left py-2 px-3">ÈõáÁî®Áä∂Ê≥Å</th>
                  <th className="text-left py-2 px-3">Èù¢Ë´áÁ®ÆÂà•</th>
                  <th className="text-left py-2 px-3">Ê¨°ÂõûÈù¢Ë´áÊó•</th>
                  <th className="text-left py-2 px-3">„É™„Éû„Ç§„É≥„ÉÄ„ÉºÁä∂Ê≥Å</th>
                </tr>
              </thead>
              <tbody>
                {reminderSchedules.slice(0, 20).map((schedule, index) => (
                  <tr key={index} className="border-b hover:bg-gray-50">
                    <td className="py-2 px-3">
                      <div>
                        <div className="font-medium">{schedule.employeeName}</div>
                        <div className="text-sm text-gray-500">{schedule.employeeId}</div>
                      </div>
                    </td>
                    <td className="py-2 px-3">
                      <span className={`
                        px-2 py-1 rounded-full text-xs font-medium
                        ${schedule.employmentStatus === 'new_employee' 
                          ? 'bg-green-100 text-green-800'
                          : schedule.employmentStatus === 'regular' 
                          ? 'bg-blue-100 text-blue-800'
                          : 'bg-purple-100 text-purple-800'
                        }
                      `}>
                        {schedule.employmentStatus === 'new_employee' ? 'Êñ∞ÂÖ•ËÅ∑Âì°' :
                         schedule.employmentStatus === 'regular' ? '‰∏ÄËà¨ËÅ∑Âì°' : 'ÁÆ°ÁêÜËÅ∑'}
                      </span>
                    </td>
                    <td className="py-2 px-3 text-sm">
                      {schedule.nextInterviewType}
                    </td>
                    <td className="py-2 px-3 text-sm">
                      {new Date(schedule.nextInterviewDate).toLocaleDateString('ja-JP')}
                    </td>
                    <td className="py-2 px-3">
                      <span className={`
                        px-2 py-1 rounded-full text-xs font-medium
                        ${schedule.reminderSent 
                          ? 'bg-gray-100 text-gray-800'
                          : 'bg-yellow-100 text-yellow-800'
                        }
                      `}>
                        {schedule.reminderSent ? 'ÈÄÅ‰ø°Ê∏à„Åø' : 'Êú™ÈÄÅ‰ø°'}
                      </span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
            
            {reminderSchedules.length > 20 && (
              <div className="mt-4 text-center">
                <p className="text-sm text-gray-500">
                  {reminderSchedules.length - 20}‰ª∂„ÅÆËøΩÂä†„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åô
                </p>
              </div>
            )}
          </div>
        )}
      </div>

      {/* „Éê„ÉÉ„ÉÅÂá¶ÁêÜ„Çπ„ÉÜ„Éº„Çø„Çπ */}
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
        <h3 className="font-semibold mb-2 text-blue-800">‚öôÔ∏è „Éê„ÉÉ„ÉÅÂá¶ÁêÜÊÉÖÂ†±</h3>
        <div className="space-y-2 text-sm text-blue-700">
          <p>‚Ä¢ Ëá™Âãï„É™„Éû„Ç§„É≥„ÉÄ„Éº„ÅØÊØéÊó•9:00„Å´ÂÆüË°å„Åï„Çå„Åæ„Åô</p>
          <p>‚Ä¢ ÊâãÂãïÂÆüË°å„ÅØÁÆ°ÁêÜËÄÖÊ®©ÈôêÔºàLevel 5‰ª•‰∏äÔºâ„ÅåÂøÖË¶Å„Åß„Åô</p>
          <p>‚Ä¢ Âá¶ÁêÜÁµêÊûú„ÅØÁõ£Êüª„É≠„Ç∞„Å´Ë®òÈå≤„Åï„Çå„Åæ„Åô</p>
        </div>
      </div>
    </div>
  );

  return (
    <div className="max-w-7xl mx-auto p-6">
      {/* Ê®©ÈôêË°®Á§∫ */}
      <div className="mb-4 text-sm text-gray-600">
        „É≠„Ç∞„Ç§„É≥: {metadata?.name} (Level {metadata?.level})
      </div>
      
      {/* „Çø„Éñ„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥ */}
      {renderTabNavigation()}
      
      {/* „Ç≥„É≥„ÉÜ„É≥„ÉÑ„Ç®„É™„Ç¢ */}
      {loading ? (
        <div className="text-center py-8">
          <div className="text-gray-500">Ë™≠„ÅøËæº„Åø‰∏≠...</div>
        </div>
      ) : (
        <div>
          {activeTab === 'today' && renderTodayBookings()}
          {activeTab === 'weekly' && renderWeeklySchedule()}
          {activeTab === 'pending' && renderPendingBookings()}
          {activeTab === 'notifications' && <InterviewNotificationList />}
          {activeTab === 'schedule' && canManageSchedule && renderScheduleManagement()}
          {activeTab === 'reminders' && canManageSchedule && renderReminderManagement()}
          {activeTab === 'statistics' && canViewStatistics && renderStatistics()}
        </div>
      )}
      
      {/* Ë©≥Á¥∞„É¢„Éº„ÉÄ„É´ */}
      {selectedBooking && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-2xl w-full max-h-screen overflow-y-auto">
            <h2 className="text-xl font-semibold mb-4">Èù¢Ë´áË©≥Á¥∞</h2>
            <div className="space-y-3">
              <div>
                <span className="font-medium">Á§æÂì°:</span> {selectedBooking.employeeName}
              </div>
              <div>
                <span className="font-medium">Êó•ÊôÇ:</span> 
                {new Date(selectedBooking.bookingDate).toLocaleDateString('ja-JP')} 
                {selectedBooking.timeSlot.startTime}-{selectedBooking.timeSlot.endTime}
              </div>
              <div>
                <span className="font-medium">Á®ÆÈ°û:</span> {selectedBooking.interviewType}
              </div>
              <div>
                <span className="font-medium">„Ç´„ÉÜ„Ç¥„É™:</span> {selectedBooking.category}
              </div>
              {selectedBooking.description && (
                <div>
                  <span className="font-medium">Áõ∏Ë´áÂÜÖÂÆπ:</span>
                  <p className="mt-1 p-3 bg-gray-50 rounded">{selectedBooking.description}</p>
                </div>
              )}
            </div>
            <div className="mt-6 flex justify-end">
              <button
                onClick={() => setSelectedBooking(null)}
                className="px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400 transition-colors"
              >
                Èñâ„Åò„Çã
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Èù¢Ë´á„Ç≠„É£„É≥„Çª„É´„É¢„Éº„ÉÄ„É´ */}
      {showCancellationModal && bookingToCancel && (
        <InterviewCancellationModal
          booking={bookingToCancel}
          isOpen={showCancellationModal}
          onClose={handleCloseCancellationModal}
          onCancel={handleCancelBooking}
          currentUserId={managerId}
        />
      )}
    </div>
  );
};

export default InterviewManagementDashboard;