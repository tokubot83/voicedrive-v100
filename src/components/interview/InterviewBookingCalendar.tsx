import React, { useState, useEffect } from 'react';
import { 
  InterviewBooking, 
  TimeSlot, 
  BookingRequest, 
  InterviewType, 
  InterviewCategory,
  MedicalEmployeeProfile,
  EmploymentStatus 
} from '../../types/interview';
import { InterviewBookingService } from '../../services/InterviewBookingService';
import InterviewReminderService from '../../services/InterviewReminderService';

interface InterviewBookingCalendarProps {
  employeeId?: string;
  onBookingComplete?: () => void;
}

const InterviewBookingCalendar: React.FC<InterviewBookingCalendarProps> = ({ 
  employeeId = 'EMP001',
  onBookingComplete
}) => {
  const bookingService = InterviewBookingService.getInstance();
  
  const [currentStep, setCurrentStep] = useState(1);
  const [selectedDates, setSelectedDates] = useState<Date[]>([]);
  const [selectedSlots, setSelectedSlots] = useState<TimeSlot[]>([]);
  const [interviewType, setInterviewType] = useState<InterviewType>('ad_hoc');
  const [interviewCategory, setInterviewCategory] = useState<InterviewCategory>('career_path');
  const [description, setDescription] = useState('');
  const [availableSlots, setAvailableSlots] = useState<Map<string, TimeSlot[]>>(new Map());
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [existingBookings, setExistingBookings] = useState<InterviewBooking[]>([]);

  // ÊôÇÈñìÊû†„ÅÆÂÆöÁæ©
  const timeSlots = [
    { id: 'slot1', startTime: '13:40', endTime: '14:10', label: '13:40-14:10' },
    { id: 'slot2', startTime: '14:20', endTime: '14:50', label: '14:20-14:50' },
    { id: 'slot3', startTime: '15:00', endTime: '15:30', label: '15:00-15:30' },
    { id: 'slot4', startTime: '15:40', endTime: '16:10', label: '15:40-16:10' },
    { id: 'slot5', startTime: '16:20', endTime: '16:50', label: '16:20-16:50' }
  ];

  // Èù¢Ë´á„Çø„Ç§„Éó„ÅÆÈÅ∏ÊäûËÇ¢ÔºàÂåªÁôÇ‰ªãË≠∑Á≥ªÊ≥ï‰∫∫Âêë„ÅëÔºâ
  const interviewTypes = [
    { value: 'new_employee_monthly', label: 'Êñ∞ÂÖ•ËÅ∑Âì°ÊúàÊ¨°Èù¢Ë´á', icon: 'ü©∫', description: 'Êñ∞ÂÖ•ËÅ∑Âì°„ÅÆÊúàÊ¨°„Éï„Ç©„É≠„Éº„Ç¢„ÉÉ„ÉóÈù¢Ë´á' },
    { value: 'regular_annual', label: 'Âπ¥Ê¨°ÂÆöÊúüÈù¢Ë´á', icon: 'üìÖ', description: 'Âπ¥1Âõû„ÅÆÂÆöÊúüÈù¢Ë´á' },
    { value: 'management_biannual', label: 'ÁÆ°ÁêÜËÅ∑Èù¢Ë´á', icon: 'üëî', description: 'ÁÆ°ÁêÜËÅ∑„Éª„É™„Éº„ÉÄ„ÉºÂêë„ÅëÂçäÂπ¥Èù¢Ë´á' },
    { value: 'ad_hoc', label: 'ÈöèÊôÇÈù¢Ë´á', icon: 'üí¨', description: 'ÂøÖË¶Å„Å´Âøú„Åò„ÅüÁõ∏Ë´áÈù¢Ë´á' },
    { value: 'incident_followup', label: '„Ç§„É≥„Ç∑„Éá„É≥„ÉàÂæåÈù¢Ë´á', icon: '‚ö†Ô∏è', description: 'ÂåªÁôÇ‰∫ãÊïÖ„Éª„Ç§„É≥„Ç∑„Éá„É≥„ÉàÂæå„ÅÆ„Éï„Ç©„É≠„Éº„Ç¢„ÉÉ„Éó' },
    { value: 'return_to_work', label: 'Âæ©ËÅ∑Èù¢Ë´á', icon: 'üîÑ', description: 'Èï∑Êúü‰ºëÊöá„Åã„Çâ„ÅÆÂæ©ËÅ∑ÊôÇÈù¢Ë´á' },
    { value: 'career_development', label: '„Ç≠„É£„É™„Ç¢ÈñãÁô∫Èù¢Ë´á', icon: 'üéØ', description: '„Ç≠„É£„É™„Ç¢ÂΩ¢Êàê„ÉªÂ∞ÇÈñÄÊÄßÂêë‰∏äÁõ∏Ë´á' },
    { value: 'stress_care', label: '„Çπ„Éà„É¨„Çπ„Ç±„Ç¢Èù¢Ë´á', icon: 'üßò', description: '„É°„É≥„Çø„É´„Éò„É´„Çπ„Éª„Çπ„Éà„É¨„ÇπÁõ∏Ë´á' },
    { value: 'performance_review', label: '‰∫∫‰∫ãË©ï‰æ°Èù¢Ë´á', icon: 'üìä', description: 'Ê•≠Á∏æË©ï‰æ°„ÉªÁõÆÊ®ôË®≠ÂÆöÈù¢Ë´á' },
    { value: 'grievance', label: 'Ëã¶ÊÉÖ„ÉªÁõ∏Ë´áÈù¢Ë´á', icon: 'üí≠', description: 'ËÅ∑Â†¥„Åß„ÅÆÊÇ©„Åø„ÉªËã¶ÊÉÖÁõ∏Ë´á' },
    { value: 'exit_interview', label: 'ÈÄÄËÅ∑Èù¢Ë´á', icon: 'üëã', description: 'ÈÄÄËÅ∑ÊôÇ„ÅÆÊúÄÁµÇÈù¢Ë´á' },
    // ÂæåÊñπ‰∫íÊèõÊÄß„ÅÆ„Åü„ÇÅÊóß„Çø„Ç§„Éó„ÇÇÊÆã„Åô
    { value: 'regular', label: 'ÂÆöÊúüÈù¢Ë´áÔºàÊóßÔºâ', icon: 'üìÖ', description: 'ÂæìÊù•„ÅÆÂÆöÊúüÈù¢Ë´á' },
    { value: 'career', label: '„Ç≠„É£„É™„Ç¢Áõ∏Ë´áÔºàÊóßÔºâ', icon: 'üéØ', description: 'ÂæìÊù•„ÅÆ„Ç≠„É£„É™„Ç¢Áõ∏Ë´á' },
    { value: 'concern', label: 'ÊÇ©„ÅøÁõ∏Ë´áÔºàÊóßÔºâ', icon: 'üí≠', description: 'ÂæìÊù•„ÅÆÊÇ©„ÅøÁõ∏Ë´á' },
    { value: 'evaluation', label: 'Ë©ï‰æ°Èù¢Ë´áÔºàÊóßÔºâ', icon: 'üìä', description: 'ÂæìÊù•„ÅÆË©ï‰æ°Èù¢Ë´á' },
    { value: 'development', label: 'ËÉΩÂäõÈñãÁô∫ÔºàÊóßÔºâ', icon: 'üìö', description: 'ÂæìÊù•„ÅÆËÉΩÂäõÈñãÁô∫' },
    { value: 'other', label: '„Åù„ÅÆ‰ªñ', icon: 'üìù', description: '„Åù„ÅÆ‰ªñ„ÅÆÈù¢Ë´á' }
  ];

  // „Ç´„ÉÜ„Ç¥„É™„ÅÆÈÅ∏ÊäûËÇ¢
  const categoryOptions = {
    career_path: '„Ç≠„É£„É™„Ç¢„Éë„Çπ',
    skill_development: '„Çπ„Ç≠„É´ÈñãÁô∫',
    work_environment: 'ËÅ∑Â†¥Áí∞Â¢É',
    workload_balance: 'Ê•≠ÂãôÈáèË™øÊï¥',
    interpersonal: '‰∫∫ÈñìÈñ¢‰øÇ',
    performance: 'Ê•≠Á∏æÊîπÂñÑ',
    compensation: 'ÂæÖÈÅá„ÉªÂá¶ÈÅá',
    training: 'Á†î‰øÆ„ÉªÊïôËÇ≤',
    promotion: 'ÊòáÈÄ≤„ÉªÊòáÊ†º',
    transfer: 'Áï∞ÂãïÂ∏åÊúõ',
    health_safety: 'ÂÅ•Â∫∑„ÉªÂÆâÂÖ®',
    other: '„Åù„ÅÆ‰ªñ'
  };

  useEffect(() => {
    loadExistingBookings();
  }, [employeeId]);

  useEffect(() => {
    if (selectedDates.length > 0) {
      loadAvailableSlots();
    }
  }, [selectedDates]);

  const loadExistingBookings = async () => {
    try {
      const bookings = await bookingService.getEmployeeBookings(employeeId);
      setExistingBookings(bookings);
    } catch (err) {
      console.error('Failed to load existing bookings:', err);
    }
  };

  const loadAvailableSlots = async () => {
    setLoading(true);
    try {
      const slotsMap = new Map<string, TimeSlot[]>();
      
      for (const date of selectedDates) {
        const slots = await bookingService.getAvailableSlots(date);
        const dateKey = date.toISOString().split('T')[0];
        slotsMap.set(dateKey, slots);
      }
      
      setAvailableSlots(slotsMap);
    } catch (err) {
      setError('Âà©Áî®ÂèØËÉΩ„Å™ÊôÇÈñìÂ∏Ø„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    } finally {
      setLoading(false);
    }
  };

  const handleDateSelect = (date: Date) => {
    if (selectedDates.length >= 3 && !selectedDates.some(d => d.getTime() === date.getTime())) {
      setError('ÈÅ∏Êäû„Åß„Åç„ÇãÊó•‰ªò„ÅØÊúÄÂ§ß3Êó•„Åæ„Åß„Åß„Åô');
      return;
    }
    
    setSelectedDates(prev => {
      const exists = prev.some(d => d.getTime() === date.getTime());
      if (exists) {
        return prev.filter(d => d.getTime() !== date.getTime());
      } else {
        return [...prev, date];
      }
    });
    setError(null);
  };

  const handleSlotSelect = (date: Date, slot: TimeSlot) => {
    const dateKey = date.toISOString().split('T')[0];
    const slotKey = `${dateKey}_${slot.id}`;
    
    setSelectedSlots(prev => {
      const exists = prev.some(s => `${s.date.toISOString().split('T')[0]}_${s.id}` === slotKey);
      if (exists) {
        return prev.filter(s => `${s.date.toISOString().split('T')[0]}_${s.id}` !== slotKey);
      } else {
        return [...prev, { ...slot, date: date }];
      }
    });
  };

  const handleSubmit = async () => {
    if (selectedSlots.length === 0) {
      setError('Â∞ë„Å™„Åè„Å®„ÇÇ1„Å§„ÅÆÊôÇÈñìÂ∏Ø„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
      return;
    }

    setLoading(true);
    setError(null);

    try {
      const request: BookingRequest = {
        employeeId,
        preferredDates: selectedDates,
        preferredTimes: selectedSlots.map(slot => `${slot.startTime}-${slot.endTime}`),
        interviewType,
        interviewCategory,
        requestedTopics: [],
        description,
        urgencyLevel: 'medium'
      };

      const response = await bookingService.requestBooking(employeeId, request);
      
      if (response.success) {
        alert('Èù¢Ë´á‰∫àÁ¥Ñ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ');
        // „É™„Çª„ÉÉ„Éà
        setCurrentStep(1);
        setSelectedDates([]);
        setSelectedSlots([]);
        setDescription('');
        loadExistingBookings();
        
        // ‰∫àÁ¥ÑÂÆå‰∫Ü„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ„ÇíÂëº„Å≥Âá∫„Åó
        if (onBookingComplete) {
          onBookingComplete();
        }
      } else {
        setError(response.message || '‰∫àÁ¥Ñ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
      }
    } catch (err) {
      setError('‰∫àÁ¥ÑÂá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
    } finally {
      setLoading(false);
    }
  };

  const renderDatePicker = () => {
    const today = new Date();
    const dates = [];
    
    for (let i = 1; i <= 30; i++) {
      const date = new Date(today);
      date.setDate(today.getDate() + i);
      
      // ÂúüÊó•„ÇíÈô§Â§ñ
      if (date.getDay() === 0 || date.getDay() === 6) continue;
      
      dates.push(date);
    }

    return (
      <div className="grid grid-cols-7 gap-2">
        {dates.map((date, index) => {
          const isSelected = selectedDates.some(d => d.getTime() === date.getTime());
          const dateStr = date.toLocaleDateString('ja-JP', { 
            month: 'numeric', 
            day: 'numeric',
            weekday: 'short'
          });
          
          return (
            <button
              key={index}
              onClick={() => handleDateSelect(date)}
              className={`
                p-3 rounded-lg text-center transition-all
                ${isSelected 
                  ? 'bg-blue-600 text-white' 
                  : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
                }
              `}
            >
              <div className="text-sm font-medium">{dateStr}</div>
            </button>
          );
        })}
      </div>
    );
  };

  const renderTimeSlots = () => {
    if (selectedDates.length === 0) {
      return (
        <div className="text-center text-gray-500 py-8">
          „Åæ„ÅöÊó•‰ªò„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ
        </div>
      );
    }

    return (
      <div className="space-y-6">
        {selectedDates.map(date => {
          const dateKey = date.toISOString().split('T')[0];
          const dateSlots = availableSlots.get(dateKey) || [];
          
          return (
            <div key={dateKey} className="border rounded-lg p-4">
              <h4 className="font-medium text-lg mb-3">
                {date.toLocaleDateString('ja-JP', { 
                  year: 'numeric',
                  month: 'long', 
                  day: 'numeric',
                  weekday: 'long'
                })}
              </h4>
              
              <div className="grid grid-cols-5 gap-2">
                {timeSlots.map(slot => {
                  const availableSlot = dateSlots.find(s => s.id === slot.id);
                  const isAvailable = availableSlot?.isAvailable || false;
                  const isSelected = selectedSlots.some(
                    s => s.date.toISOString().split('T')[0] === dateKey && s.id === slot.id
                  );
                  
                  return (
                    <button
                      key={slot.id}
                      onClick={() => isAvailable && handleSlotSelect(date, {
                        id: slot.id,
                        date: date,
                        startTime: slot.startTime,
                        endTime: slot.endTime,
                        isAvailable,
                        isBlocked: slot.isBlocked || false,
                        blockedBy: slot.blockedBy,
                        blockedReason: slot.blockedReason,
                        bookedBy: slot.bookedBy,
                        bookingId: slot.bookingId
                      })}
                      disabled={!isAvailable}
                      className={`
                        p-3 rounded-lg text-center transition-all text-sm
                        ${!isAvailable 
                          ? 'bg-gray-100 text-gray-400 cursor-not-allowed' 
                          : isSelected
                            ? 'bg-blue-600 text-white'
                            : 'bg-green-100 hover:bg-green-200 text-green-700'
                        }
                      `}
                    >
                      <div>{slot.label}</div>
                      {!isAvailable && <div className="text-xs">‰∫àÁ¥ÑÊ∏à</div>}
                    </button>
                  );
                })}
              </div>
            </div>
          );
        })}
      </div>
    );
  };

  const renderStep1 = () => (
    <div className="space-y-6">
      <div className="text-center mb-6">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">Â∏åÊúõÊó•ÊôÇ„ÅÆÈÅ∏Êäû</h2>
        <p className="text-gray-600 text-lg">
          Èù¢Ë´á„ÇíÂ∏åÊúõ„Åô„ÇãÊó•„Å®ÊôÇÈñìÂ∏Ø„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ<br />
          <span className="text-sm text-blue-600">ÔºàÊúÄÂ§ß3Êó•„Åæ„Åß„ÄÅÊôÇÈñì„ÅØË§áÊï∞ÈÅ∏ÊäûÂèØËÉΩÔºâ</span>
        </p>
      </div>

      <div className="bg-blue-50 p-6 rounded-lg border border-blue-200">
        <h3 className="font-semibold text-lg mb-4">Êó•‰ªò„ÇíÈÅ∏Êäû</h3>
        {renderDatePicker()}
      </div>

      {selectedDates.length > 0 && (
        <div className="bg-green-50 p-6 rounded-lg border border-green-200">
          <h3 className="font-semibold text-lg mb-4">ÊôÇÈñìÂ∏Ø„ÇíÈÅ∏Êäû</h3>
          {loading ? (
            <div className="text-center py-4">Ë™≠„ÅøËæº„Åø‰∏≠...</div>
          ) : (
            renderTimeSlots()
          )}
        </div>
      )}

      <div className="flex justify-between mt-6">
        <div className="text-sm text-gray-600">
          ÈÅ∏Êäû„Åó„ÅüÊó•‰ªò: {selectedDates.length}Êó•<br />
          ÈÅ∏Êäû„Åó„ÅüÊôÇÈñìÂ∏Ø: {selectedSlots.length}Êû†
        </div>
        <button
          onClick={() => setCurrentStep(2)}
          disabled={selectedSlots.length === 0}
          className={`
            px-6 py-3 rounded-lg font-medium text-lg transition-all
            ${selectedSlots.length === 0
              ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
              : 'bg-blue-600 text-white hover:bg-blue-700'
            }
          `}
        >
          Ê¨°„Å∏ÈÄ≤„ÇÄ
        </button>
      </div>
    </div>
  );

  const renderStep2 = () => (
    <div className="space-y-6">
      <div className="text-center mb-6">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">Èù¢Ë´áÂÜÖÂÆπ„ÅÆÈÅ∏Êäû</h2>
        <p className="text-gray-600 text-lg">
          Áõ∏Ë´á„Åó„Åü„ÅÑÂÜÖÂÆπ„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ
        </p>
      </div>

      <div className="bg-blue-50 p-6 rounded-lg border border-blue-200">
        <h3 className="font-semibold text-lg mb-4">Èù¢Ë´á„ÅÆÁ®ÆÈ°û</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {interviewTypes.map(type => (
            <button
              key={type.value}
              onClick={() => setInterviewType(type.value as InterviewType)}
              className={`
                p-4 rounded-lg text-left transition-all h-auto
                ${interviewType === type.value
                  ? 'bg-blue-600 text-white'
                  : 'bg-white hover:bg-gray-50 text-gray-700 border border-gray-300'
                }
              `}
            >
              <div className="flex items-center mb-2">
                {type?.icon && <span className="text-2xl mr-2">{type.icon}</span>}
                <div className="font-medium text-sm">{type.label || 'Êú™Ë®≠ÂÆö'}</div>
              </div>
              {type.description && (
                <div className={`text-xs leading-relaxed ${
                  interviewType === type.value ? 'text-blue-100' : 'text-gray-500'
                }`}>
                  {type.description}
                </div>
              )}
            </button>
          ))}
        </div>
      </div>

      <div className="bg-green-50 p-6 rounded-lg border border-green-200">
        <h3 className="font-semibold text-lg mb-4">Ë©≥Á¥∞„Ç´„ÉÜ„Ç¥„É™</h3>
        <select
          value={interviewCategory}
          onChange={(e) => setInterviewCategory(e.target.value as InterviewCategory)}
          className="w-full p-3 text-lg border border-gray-300 rounded-lg"
        >
          {Object.entries(categoryOptions).map(([value, label]) => (
            <option key={value} value={value}>{label}</option>
          ))}
        </select>
      </div>

      <div className="bg-yellow-50 p-6 rounded-lg border border-yellow-200">
        <h3 className="font-semibold text-lg mb-4">Áõ∏Ë´áÂÜÖÂÆπÔºà‰ªªÊÑèÔºâ</h3>
        <textarea
          value={description}
          onChange={(e) => setDescription(e.target.value)}
          placeholder="Áõ∏Ë´á„Åó„Åü„ÅÑÂÜÖÂÆπ„ÇíÁ∞°Âçò„Å´Ë®òÂÖ•„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºà‰ªªÊÑèÔºâ"
          className="w-full p-3 text-lg border border-gray-300 rounded-lg"
          rows={4}
        />
      </div>

      <div className="flex justify-between mt-6">
        <button
          onClick={() => setCurrentStep(1)}
          className="px-6 py-3 rounded-lg font-medium text-lg bg-gray-300 text-gray-700 hover:bg-gray-400 transition-all"
        >
          Êàª„Çã
        </button>
        <button
          onClick={() => setCurrentStep(3)}
          className="px-6 py-3 rounded-lg font-medium text-lg bg-blue-600 text-white hover:bg-blue-700 transition-all"
        >
          Á¢∫Ë™ç„Å∏ÈÄ≤„ÇÄ
        </button>
      </div>
    </div>
  );

  const renderStep3 = () => (
    <div className="space-y-6">
      <div className="text-center mb-6">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">‰∫àÁ¥ÑÂÜÖÂÆπ„ÅÆÁ¢∫Ë™ç</h2>
        <p className="text-gray-600 text-lg">
          ‰ª•‰∏ã„ÅÆÂÜÖÂÆπ„Åß‰∫àÁ¥Ñ„ÇíÁî≥Ë´ã„Åó„Åæ„Åô
        </p>
      </div>

      <div className="bg-gray-50 p-6 rounded-lg border border-gray-300">
        <h3 className="font-semibold text-lg mb-4">‰∫àÁ¥ÑÂÜÖÂÆπ</h3>
        
        <div className="space-y-3">
          <div>
            <span className="font-medium">Èù¢Ë´áÁ®ÆÈ°û:</span>
            <span className="ml-2">
              {interviewTypes.find(t => t.value === interviewType)?.label}
            </span>
          </div>
          
          <div>
            <span className="font-medium">„Ç´„ÉÜ„Ç¥„É™:</span>
            <span className="ml-2">{categoryOptions[interviewCategory]}</span>
          </div>
          
          <div>
            <span className="font-medium">Â∏åÊúõÊó•ÊôÇ:</span>
            <div className="mt-2 space-y-1">
              {selectedSlots.map((slot, index) => (
                <div key={index} className="ml-4 text-sm">
                  ‚Ä¢ {new Date(slot.date).toLocaleDateString('ja-JP')} {slot.startTime}-{slot.endTime}
                </div>
              ))}
            </div>
          </div>
          
          {description && (
            <div>
              <span className="font-medium">Áõ∏Ë´áÂÜÖÂÆπ:</span>
              <div className="mt-1 p-3 bg-white rounded border border-gray-200">
                {description}
              </div>
            </div>
          )}
        </div>
      </div>

      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
          {error}
        </div>
      )}

      <div className="flex justify-between mt-6">
        <button
          onClick={() => setCurrentStep(2)}
          className="px-6 py-3 rounded-lg font-medium text-lg bg-gray-300 text-gray-700 hover:bg-gray-400 transition-all"
        >
          Êàª„Çã
        </button>
        <button
          onClick={handleSubmit}
          disabled={loading}
          className={`
            px-6 py-3 rounded-lg font-medium text-lg transition-all
            ${loading
              ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
              : 'bg-green-600 text-white hover:bg-green-700'
            }
          `}
        >
          {loading ? '‰∫àÁ¥Ñ‰∏≠...' : '‰∫àÁ¥Ñ„ÇíÁî≥Ë´ã'}
        </button>
      </div>
    </div>
  );

  const renderExistingBookings = () => {
    if (existingBookings.length === 0) return null;

    return (
      <div className="mb-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
        <h3 className="font-semibold text-lg mb-2">ÁèæÂú®„ÅÆ‰∫àÁ¥ÑÁä∂Ê≥Å</h3>
        <div className="space-y-2">
          {existingBookings.map(booking => (
            <div key={booking.id} className="text-sm">
              ‚Ä¢ {new Date(booking.bookingDate).toLocaleDateString('ja-JP')} 
              {booking.timeSlot.startTime}-{booking.timeSlot.endTime}
              Ôºà{booking.status === 'confirmed' ? 'Á¢∫ÂÆö' : 'Áî≥Ë´ã‰∏≠'}Ôºâ
            </div>
          ))}
        </div>
      </div>
    );
  };

  return (
    <div className="max-w-4xl mx-auto p-6">
      {renderExistingBookings()}
      
      <div className="mb-8">
        <div className="flex justify-center space-x-4">
          {[1, 2, 3].map(step => (
            <div
              key={step}
              className={`
                flex items-center justify-center w-12 h-12 rounded-full text-lg font-medium
                ${currentStep === step
                  ? 'bg-blue-600 text-white'
                  : currentStep > step
                    ? 'bg-green-600 text-white'
                    : 'bg-gray-300 text-gray-600'
                }
              `}
            >
              {currentStep > step ? '‚úì' : step}
            </div>
          ))}
        </div>
        <div className="flex justify-center mt-2 space-x-8 text-sm">
          <span className={currentStep === 1 ? 'font-bold' : ''}>Êó•ÊôÇÈÅ∏Êäû</span>
          <span className={currentStep === 2 ? 'font-bold' : ''}>ÂÜÖÂÆπÈÅ∏Êäû</span>
          <span className={currentStep === 3 ? 'font-bold' : ''}>Á¢∫Ë™ç</span>
        </div>
      </div>

      {currentStep === 1 && renderStep1()}
      {currentStep === 2 && renderStep2()}
      {currentStep === 3 && renderStep3()}
    </div>
  );
};

export default InterviewBookingCalendar;